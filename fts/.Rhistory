shiny::runApp()
#devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(
name="joebrew",
token="C4D0E22C484D74139A50EDE2BA1887F4",
secret="zbbeauXf53w0Qnpxcx1RREIdIUJAaRaVjZLcN/Id")
setwd("c:/users/brewjr/documents/ShinyApps/")
deployApp("fts")
deployApp(appName="fts")
setwd("c:/users/brewjr/documents/ShinyApps/f2s")
deployApp(appName="f2s")
setwd("c:/users/brewjr/documents/ShinyApps/")
deployApp(appName="f2s")
setwd("c:/users/brewjr/documents/ShinyApps/fts")
deployApp(appName="fts")
deployApp(appName="farm2school")
shiny::runApp('~/ShinyApps/fts')
shiny::runApp('~/ShinyApps/fts')
shiny::runApp('~/ShinyApps/fts')
deployApp(appName="farm2school")
deployApp(appName="farm2school")
setwd("C:/Users/BrewJR/Documents/ShinyApps/fts")
library(RCurl)
library(maps)
library(RColorBrewer)
##########
############
# monthify function
############
Monthify <- function(x){
format(x, format = "%B")
}
##########
# READ IN GOOGLE SPREADSHEET
##########
myLink <- "https://docs.google.com/spreadsheet/pub?key=0AsUfdoufBWMJdFV6a0p0NjdDRzJWQzA3WDFzRWxzQ3c&output=csv"
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
myCsv <- getURL(myLink)
farm <- read.csv(textConnection(myCsv), skip=0)
rm(myCsv, myLink)
# DEAL WITH TIMESTAMP ISSUES
timestamp <- as.character(farm$Timestamp)
timestamp <- sub(" .*", "", timestamp)
timestamp <- as.Date(timestamp, format="%m/%d/%Y")
###########
# READ IN THE NUMBER OF PREVIOUS GEOCODING
###########
number <- read.csv("number.csv")
number <- number$x
##########
# SUBSET TO ONLY INCLUDE COLUMNS FOR FINAL PRESENTATION
##########
farm <- farm[,c("Farm.name.", "Farmer.name.", "Farm.Mailing.Address.", "Zip.code.",
"Business.Location.County.", "What.are.you.currently.growing.",
"Would.you.be.willing.to.expand.production.of.a.certain.crop.if.the.market.were.available.",
"DO.you.have.a.farm.food.safety.plan.",
"Have.you.ever.received.a.third.party.audit.",
"If.no..would.it.be.helpful.to.have.a.food.safety.training.in.this.county..",
"Do.you.currently.do.any.processing.or.packaging.",
"If.yes..what.type..",
"Do.you.have.an.inspected.audited.facility.for.processing.packing.",
"Would.you.be.willing.to.collaborate.with.a.co.op.to.improve.capacity.for.processing.or.packing.",
"Have.you.been.approached.in.the.past.to.provide.produce.to.schools.or.have.you.ever.tried.to.sell.to.schools.",
"What.is.your.farm.s.total.harvestable.acreage.",
"Do.you.deliver.your.product.to.customers.",
"If.no..how.do.you.handle.delivery.",
"What.are.your.current.sales.distribution.process.",
"What.counties.do.you.currently.serve.",
"NOTES")]
names(farm)
july <- read.csv("report_july.csv", skip=1)
names(july)
names(farm) <- names(july)
rm(july)
names(farm)
farm$timestamp <- timestamp
farm$month <- Monthify(timestamp)
###########
# GEOCODE FARMS
###########
library(RCurl)
library(RJSONIO)
library(plyr)
url <- function(address, return.call = "json", sensor = "false") {
root <- "http://maps.google.com/maps/api/geocode/"
u <- paste(root, return.call, "?address=", address, "&sensor=", sensor, sep = "")
return(URLencode(u))
}
geoCode <- function(address,verbose=FALSE) {
if(verbose) cat(address,"\n")
u <- url(address)
doc <- getURL(u)
x <- fromJSON(doc,simplify = FALSE)
if(x$status=="OK") {
lat <- x$results[[1]]$geometry$location$lat
lng <- x$results[[1]]$geometry$location$lng
location_type <- x$results[[1]]$geometry$location_type
formatted_address <- x$results[[1]]$formatted_address
return(c(lat, lng, location_type, formatted_address))
} else {
return(c(NA,NA,NA, NA))
}
}
# Use plyr to getgeocoding for a vector
addressify <- function(x){
address <- paste(as.character(gsub(" FL | fl | Fl |FL,| fl,| Fl,|,,", "", x)), "Florida")
address[which(address == " Florida")] <- ""
return(address)
}
names(farm)
farm$Farm.Mailing.Address. <- addressify(farm$Farm.Mailing.Address)
names(farm)
address <- farm$Farm.Mailing.Address.
address[which(address == "")] <- paste0(farm$Farm.name[which(address == "")], ", Florida")
###### GEOCODE NEW ROWS
if(nrow(farm) > number){
#only geocode new rows
locations <- ldply(address[if(nrow(farm) == (number+1)){(number+1)}else{(number+1):nrow(farm)}], function(x) geoCode(x))
names(locations) <- c("lat","lon","location_type", "forAddress")
############
# MAKE NA THE "FLORIDA" ONES
############
locations$lat[which(locations$lat == 27.6648274 & locations$lon == -81.5157535)] <- NA
locations$lon[which(is.na(locations$lat))] <- NA
############
# CREATE GEOCODED DATAFRAME OF ADDRESSES AND POINTS
############
new.gc <- data.frame(cbind(address[if(nrow(farm) == (number+1)){(number+1)}else{(number+1):nrow(farm)}], locations))
names(new.gc)[1] <- "Farm.Mailing.Address."
############
# READ IN OLD GC
############
gc <- read.csv("gc.csv")
gc$X <- NULL
############
# RBIND OLD GC WITH NEW GC
############
y <- as.data.frame(rbind(gc, new.gc))
gc <- y
rm(new.gc)
#############
# WRITE THE GC FOR ALL TIMES
#############
write.csv(gc, "gc.csv")
############
# WRITE A CSV TO SAY HOW MANY ADDRESSES WERE ALREADY GEOCODED
############
write.csv(nrow(gc), "number.csv")
}else{
############
# READ IN OLD GC
############
gc <- read.csv("gc.csv")
gc$X <- NULL
}
names(farm)
library(plyr)
farm <- join(x = farm,
y = gc,
by = "Farm.Mailing.Address.",
type = "left",
match = "first")
names(farm)
vector(names(farm))
(names(farm))
july <- read.csv("report_july.csv", skip=1)
rightOrder <- c("Farm.name." ,
"Farmer.name." ,
"Farm.Mailing.Address.",
"Zip.code."      ,
"Business.Location.County."   ,
"What.are.you.currently.growing."  ,
"Would.you.be.willing.to.expand." ,
"Do.you.have.a.farm.safety.plan." ,
"Have.you.received.a.third.party.audit." ,
"If.no..would.it.be.helpful.to.have.a.food.safety.training.in.this.county.." ,
"Do.you.currently.do.any.processing.or.packaging."  ,
"If.yes..what.type.."  ,
"Do.you.have.an.inspected.audited.facility.for.processing.packing." ,
"Would.you.be.willing.to.collaborate.with.a.co.op.to.improve.capacity.for.processing.or.packaging.",
"Have.you.ever.tried.to.sell.to.schools."  ,
"What.is.your.farm.s.total.harvestable.acreage." ,
"Do.you.deliver.your.product.to.customers."  ,
"If.no..how.do.you.handle.delivery.",
"What.are.your.current.sales.distribution.processes."  ,
"What.counties.school.districts.do.you.currently.serve."  ,
"NOTES"   ,
"timestamp" ,
"month" ,
"lat"  ,
"lon",
"location_type" ,
"forAddress")
shiny::runApp()
rightOrder
rightOrder <- c("Farm.name." ,
"Farmer.name." ,
"Farm.Mailing.Address.",
"Zip.code."      ,
"Business.Location.County."   ,
"What.are.you.currently.growing."  ,
"Would.you.be.willing.to.expand." ,
"Do.you.have.a.farm.safety.plan." ,
"Have.you.received.a.third.party.audit." ,
"If.no..would.it.be.helpful.to.have.a.food.safety.training.in.this.county.." ,
"Do.you.currently.do.any.processing.or.packaging."  ,
"If.yes..what.type.."  ,
"Do.you.have.an.inspected.audited.facility.for.processing.packing." ,
"Would.you.be.willing.to.collaborate.with.a.co.op.to.improve.capacity.for.processing.or.packaging.",
"Have.you.ever.tried.to.sell.to.schools."  ,
"What.is.your.farm.s.total.harvestable.acreage." ,
"Do.you.deliver.your.product.to.customers."  ,
"If.no..how.do.you.handle.delivery.",
"What.are.your.current.sales.distribution.processes."  ,
"What.counties.school.districts.do.you.currently.serve."  ,
"NOTES")
names(july)
july <- read.csv("report_july.csv", skip=1)
names(july)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("c:/users/brewjr/documents/ShinyApps/fts")
library(shiny)
deployApp(appName="farm2school")
library(shinyapps)
library(shiny)
deployApp(appName="farm2school")
deployApp(appName="farm2school")
shiny::runApp('~/ShinyApps/fts')
shiny::runApp('~/ShinyApps/fts')
deployApp(appName="farm2school")
shiny::runApp('~/ShinyApps/fts')
shiny::runApp('~/ShinyApps/fts')
deployApp(appName="farm2school")
shiny::runApp()
shiny::runApp()
shiny::runApp()
#devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(
name="joebrew",
token="C4D0E22C484D74139A50EDE2BA1887F4",
secret="zbbeauXf53w0Qnpxcx1RREIdIUJAaRaVjZLcN/Id")
setwd("c:/users/brewjr/documents/ShinyApps/fts")
###################
library(shiny)
deployApp(appName="farm2school")
shiny::runApp('~/ShinyApps/fts')
shiny::runApp('~/ShinyApps/fts')
shiny::runApp('~/ShinyApps/fts')
shiny::runApp('~/ShinyApps/fts')
shiny::runApp('~/ShinyApps/fts')
map("county", "fl", fill=TRUE, col="white", border="grey")
shiny::runApp('~/ShinyApps/fts')
names(farm2)
str(farm)
summary(farm$What.is.your.farm.s.total.harvestable.acreage. )
levels(farm$What.is.your.farm.s.total.harvestable.acreage. )
mysize <- ifelse(farm$What.is.your.farm.s.total.harvestable.acreage. == "", 1,
ifelse(farm$What.is.your.farm.s.total.harvestable.acreage. == "1-9", 2,
ifelse(farm$What.is.your.farm.s.total.harvestable.acreage. == "1.5 Acres", 3,
ifelse(farm$What.is.your.farm.s.total.harvestable.acreage. == "10-49", 4,
ifelse(farm$What.is.your.farm.s.total.harvestable.acreage. == "50-179", 5,
ifelse(farm$What.is.your.farm.s.total.harvestable.acreage. == "180-499", 6,
ifelse(farm$What.is.your.farm.s.total.harvestable.acreage. == "500-999", 7,
ifelse(farm$What.is.your.farm.s.total.harvestable.acreage.  == "1000+", 8,
1))))))))
sqrt(mysize)
summary(farm$Have.you.ever.tried.to.sell.to.schools.)
levels(farm$Have.you.ever.tried.to.sell.to.schools.)
#mycols <- adjustcolor(colorRampPalette(brewer.pal(8, "Dark2"))(nrow(farm)), alpha.f=0.8)
mysize <- ifelse(farm$What.is.your.farm.s.total.harvestable.acreage. == "", 1,
ifelse(farm$What.is.your.farm.s.total.harvestable.acreage. == "1-9", 2,
ifelse(farm$What.is.your.farm.s.total.harvestable.acreage. == "1.5 Acres", 3,
ifelse(farm$What.is.your.farm.s.total.harvestable.acreage. == "10-49", 4,
ifelse(farm$What.is.your.farm.s.total.harvestable.acreage. == "50-179", 5,
ifelse(farm$What.is.your.farm.s.total.harvestable.acreage. == "180-499", 6,
ifelse(farm$What.is.your.farm.s.total.harvestable.acreage. == "500-999", 7,
ifelse(farm$What.is.your.farm.s.total.harvestable.acreage.  == "1000+", 8,
1))))))))
mycols <- ifelse(farm$Have.you.ever.tried.to.sell.to.schools. == "", "grey",
ifelse(farm$Have.you.ever.tried.to.sell.to.schools. == "No", "darkred",
ifelse(farm$Have.you.ever.tried.to.sell.to.schools. == "Yes", "darkgreen",
"grey")))
mycols <- adjustcolor(mycols, alpha.f=0.6)
map("county", "fl", fill=TRUE, col="white", border="darkgrey")
for(i in 1:nrow(farm)){
points(farm$lon[i], farm$lat[i],
col=mycols[i],
pch=16,cex = mysize[i] / 2)
}
legend("bottomleft", pch=16, col=adjustcolor(c("grey", "darkred", "darkgreen"), alpha.f=0.3),
legend=c("Unknown", "No", "Yes"),
title = "Ever tried to sell to schools?",
bty="n", border=FALSE, cex=0.7)
par(mfrow=c(1,1))
par(mar=c(0,0,0,0))
par(oma=c(0,0,0,0))
#mycols <- adjustcolor(colorRampPalette(brewer.pal(8, "Dark2"))(nrow(farm)), alpha.f=0.8)
mysize <- ifelse(farm$What.is.your.farm.s.total.harvestable.acreage. == "", 1,
ifelse(farm$What.is.your.farm.s.total.harvestable.acreage. == "1-9", 2,
ifelse(farm$What.is.your.farm.s.total.harvestable.acreage. == "1.5 Acres", 2,
ifelse(farm$What.is.your.farm.s.total.harvestable.acreage. == "10-49", 3,
ifelse(farm$What.is.your.farm.s.total.harvestable.acreage. == "50-179", 4,
ifelse(farm$What.is.your.farm.s.total.harvestable.acreage. == "180-499", 5,
ifelse(farm$What.is.your.farm.s.total.harvestable.acreage. == "500-999", 6,
ifelse(farm$What.is.your.farm.s.total.harvestable.acreage.  == "1000+", 7,
1))))))))
mycols <- ifelse(farm$Have.you.ever.tried.to.sell.to.schools. == "", "grey",
ifelse(farm$Have.you.ever.tried.to.sell.to.schools. == "No", "darkred",
ifelse(farm$Have.you.ever.tried.to.sell.to.schools. == "Yes", "darkgreen",
"grey")))
mycols <- adjustcolor(mycols, alpha.f=0.3)
map("county", "fl", fill=TRUE, col="white", border="darkgrey")
for(i in 1:nrow(farm)){
points(farm$lon[i], farm$lat[i],
col=mycols[i],
pch=16,cex = mysize[i] / 2)
}
legend("bottomleft", pch=16, col=adjustcolor(c("grey", "darkred", "darkgreen"), alpha.f=0.5),
legend=c("Unknown", "No", "Yes"),
title = "Ever tried to sell to schools?",
bty="n", border=FALSE, cex=0.7)
legend("left", pch=16, col=adjustcolor("grey", alpha.f=0.5), pt.cex=(1:7)/2,
legend=c("Unknown", "1-9", "10-49", "50-179", "180-499", "500-999", "1000+"),
title = "Total harverstable acreage",
bty="n", border=FALSE, cex=0.7)
shiny::runApp('~/ShinyApps/fts')
shiny::runApp('~/ShinyApps/fts')
shiny::runApp('~/ShinyApps/fts')
shiny::runApp('~/ShinyApps/fts')
library(shiny)
deployApp(appName="farm2school")
shiny::runApp('~/ShinyApps/fts')
deployApp(appName="farm2school")
library(RCurl)
library(RCurl)
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
myLink <- "https://docs.google.com/spreadsheets/d/1wxx9wT_kDBNreARi6AY59QfTn8ePI9qoTs37lKsWTNY/export?&format=csv"
myCsv <- getURL(myLink)
ir <- read.csv(textConnection(myCsv))
head(ir)
library(RCurl)
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
myLink <- "https://docs.google.com/spreadsheets/d/1wxx9wT_kDBNreARi6AY59QfTn8ePI9qoTs37lKsWTNY/export?&format=csv"
myCsv <- getURL(myLink)
fb <- read.csv(textConnection(myCsv))
#######
# READ IN YOUR FOOTBALL SPREADSHEET FROM THE INTERNET, NAMING IT FB
#######
library(RCurl)
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
myLink <- "https://docs.google.com/spreadsheets/d/1wxx9wT_kDBNreARi6AY59QfTn8ePI9qoTs37lKsWTNY/export?&format=csv"
myCsv <- getURL(myLink)
fb <- read.csv(textConnection(myCsv))
rm(fb, myCsv)
#######
# READ IN YOUR FOOTBALL SPREADSHEET FROM THE INTERNET, NAMING IT FB
#######
library(RCurl)
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
myLink <- "https://docs.google.com/spreadsheets/d/1wxx9wT_kDBNreARi6AY59QfTn8ePI9qoTs37lKsWTNY/export?&format=csv"
myCsv <- getURL(myLink)
fb <- read.csv(textConnection(myCsv))
rm(myLink, myCsv)
names(fb)
