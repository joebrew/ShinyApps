{
    "contents" : "library(RCurl)\nlibrary(maps)\nlibrary(RColorBrewer)\n##########\n# SET WD\n##########\n# setwd(\"C:/Users/BrewJR/Documents/ShinyApps/fts\")\n\n############\n# monthify function\n############\nMonthify <- function(x){\n  format(x, format = \"%B\")\n}\n\n\n##########\n# READ IN GOOGLE SPREADSHEET\n##########\nmyLink <- \"https://docs.google.com/spreadsheet/pub?key=0AsUfdoufBWMJdFV6a0p0NjdDRzJWQzA3WDFzRWxzQ3c&output=csv\"\noptions(RCurlOptions = list(cainfo = system.file(\"CurlSSL\", \"cacert.pem\", package = \"RCurl\")))\nmyCsv <- getURL(myLink)\nfarm <- read.csv(textConnection(myCsv), skip=0)\nrm(myCsv, myLink)\n\n# DEAL WITH TIMESTAMP ISSUES\ntimestamp <- as.character(farm$Timestamp)\ntimestamp <- sub(\" .*\", \"\", timestamp)\ntimestamp <- as.Date(timestamp, format=\"%m/%d/%Y\")\n\n###########\n# READ IN THE NUMBER OF PREVIOUS GEOCODING\n###########\nnumber <- read.csv(\"number.csv\")\nnumber <- number$x\n\n##########\n# SUBSET TO ONLY INCLUDE COLUMNS FOR FINAL PRESENTATION\n##########\nfarm <- farm[,c(\"Farm.name.\", \"Farmer.name.\", \"Farm.Mailing.Address.\", \"Zip.code.\", \n                 \"Business.Location.County.\", \"What.are.you.currently.growing.\",\n                 \"Would.you.be.willing.to.expand.production.of.a.certain.crop.if.the.market.were.available.\",\n                 \"DO.you.have.a.farm.food.safety.plan.\",\n                 \"Have.you.ever.received.a.third.party.audit.\",\n                 \"If.no..would.it.be.helpful.to.have.a.food.safety.training.in.this.county..\",\n                 \"Do.you.currently.do.any.processing.or.packaging.\",\n                 \"If.yes..what.type..\",\n                 \"Do.you.have.an.inspected.audited.facility.for.processing.packing.\",\n                 \"Would.you.be.willing.to.collaborate.with.a.co.op.to.improve.capacity.for.processing.or.packing.\",\n                 \"Have.you.been.approached.in.the.past.to.provide.produce.to.schools.or.have.you.ever.tried.to.sell.to.schools.\",\n                 \"What.is.your.farm.s.total.harvestable.acreage.\",\n                 \"Do.you.deliver.your.product.to.customers.\",\n                 \"If.no..how.do.you.handle.delivery.\",\n                 \"What.are.your.current.sales.distribution.process.\",\n                 \"What.counties.do.you.currently.serve.\",\n                 \"NOTES\")]\n\n##########\n# READ IN EXAMPLE OF FINAL PROJECT\n##########\njuly <- read.csv(\"report_july.csv\", skip=1)\n\n###########\n# ASSIGN NAMES OF JULY TO NAMES OF FARM\n###########\nnames(farm) <- names(july)\n\n##############\n# ADD BACK IN TIMESTAMP\n##############\nfarm$timestamp <- timestamp\nfarm$month <- Monthify(timestamp)\n\n###########\n# GEOCODE FARMS\n###########\nlibrary(RCurl)\nlibrary(RJSONIO)\nlibrary(plyr)\n\nurl <- function(address, return.call = \"json\", sensor = \"false\") {\n  root <- \"http://maps.google.com/maps/api/geocode/\"\n  u <- paste(root, return.call, \"?address=\", address, \"&sensor=\", sensor, sep = \"\")\n  return(URLencode(u))\n}\n\ngeoCode <- function(address,verbose=FALSE) {\n  if(verbose) cat(address,\"\\n\")\n  u <- url(address)\n  doc <- getURL(u)\n  x <- fromJSON(doc,simplify = FALSE)\n  if(x$status==\"OK\") {\n    lat <- x$results[[1]]$geometry$location$lat\n    lng <- x$results[[1]]$geometry$location$lng\n    location_type <- x$results[[1]]$geometry$location_type\n    formatted_address <- x$results[[1]]$formatted_address\n    return(c(lat, lng, location_type, formatted_address))\n  } else {\n    return(c(NA,NA,NA, NA))\n  }\n}\n\n# Use plyr to getgeocoding for a vector\naddressify <- function(x){\n  address <- paste(as.character(gsub(\" FL | fl | Fl |FL,| fl,| Fl,|,,\", \"\", x)), \"Florida\")\n  address[which(address == \" Florida\")] <- \"\"\n  return(address)\n}\nfarm$Farm.Mailing.Address. <- addressify(farm$Farm.Mailing.Address)\n\naddress <- farm$Farm.Mailing.Address.\naddress[which(address == \"\")] <- paste0(farm$Farm.name[which(address == \"\")], \", Florida\")\n\n###### GEOCODE NEW ROWS\nif(nrow(farm) > number){\n  \n  #only geocode new rows\n  locations <- ldply(address[if(nrow(farm) == (number+1)){(number+1)}else{(number+1):nrow(farm)}], function(x) geoCode(x))\n  names(locations) <- c(\"lat\",\"lon\",\"location_type\", \"forAddress\")\n  \n  \n  ############\n  # MAKE NA THE \"FLORIDA\" ONES\n  ############\n  locations$lat[which(locations$lat == 27.6648274 & locations$lon == -81.5157535)] <- NA\n  locations$lon[which(is.na(locations$lat))] <- NA\n  \n  ############\n  # CREATE GEOCODED DATAFRAME OF ADDRESSES AND POINTS\n  ############\n  new.gc <- data.frame(cbind(address[if(nrow(farm) == (number+1)){(number+1)}else{(number+1):nrow(farm)}], locations))\n  names(new.gc)[1] <- \"Farm.Mailing.Address.\"\n  \n  ############\n  # READ IN OLD GC\n  ############\n  gc <- read.csv(\"gc.csv\")\n  gc$X <- NULL\n  \n  ############\n  # RBIND OLD GC WITH NEW GC\n  ############\n  y <- as.data.frame(rbind(gc, new.gc))\n  \n  gc <- y\n  rm(new.gc)\n\n  #############\n  # WRITE THE GC FOR ALL TIMES\n  #############\n  write.csv(gc, \"gc.csv\")\n  \n  ############\n  # WRITE A CSV TO SAY HOW MANY ADDRESSES WERE ALREADY GEOCODED\n  ############\n  write.csv(nrow(gc), \"number.csv\")\n  \n}else{\n  \n  ############\n  # READ IN OLD GC\n  ############\n  gc <- read.csv(\"gc.csv\")\n  gc$X <- NULL\n  \n}\n\n############\n# MERGE FARM AND GC\n############\nlibrary(plyr)\nfarm <- join(x = farm,\n          y = gc,\n          by = \"Farm.Mailing.Address.\",\n          type = \"left\",\n          match = \"first\")\n\n# REORDER COLUMN NAMES\nfarm2 <- farm[,c(names(july), \"month\")]\n\n",
    "created" : 1409146208544.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1976591801",
    "id" : "71CCEB4C",
    "lastKnownWriteTime" : 1409149238,
    "path" : "~/ShinyApps/fts/farmers.R",
    "project_path" : "farmers.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}