{
    "contents" : "\n###################\n#SET DATE / TIME PARAMETERS\n###################\nstart.time <- Sys.time()\ntoday <- Sys.Date()  \nyesterday <- today - 1\n\n###################\n#DEFINE AND SET WD\n###################\noriginalwd <- paste0(\"E:/fdoh/private/surv/\", today)\nsurvwd <- \"E:/fdoh/private/surv\"\nhistoricalwd <- \"E:/fdoh/private/surv/historical\"\ngiswd <- \"E:/fdoh/private/surv/gis\"\n\nsetwd(originalwd) \n\n\n###################\n#SET Q (HOW FAR TO GO BACK IN TS PLOTS)\n###################\nq <- 15 #HOW FAR BACK DO I WANT PLOTS TO GO?\n\n###################\n#LOAD  PACKAGES\n###################\nlibrary(RColorBrewer)\nlibrary(xtable)\nlibrary(gdata)\nlibrary(plyr)\nlibrary(maps)\nlibrary(mapdata)\nlibrary(maptools)\nlibrary(RColorBrewer)\nlibrary(rJava)\nlibrary(OpenStreetMap)\nlibrary(rgdal)\nlibrary(shapefiles)\nlibrary(SemiPar)\nlibrary(wordcloud)\nlibrary(RCurl)\nlibrary(classInt)\nlibrary(data.table)\n\n\n###################\n#SET GRAPHICAL PARAMETERS\n###################\ndef.par <- par(no.readonly = TRUE)\npar(def.par)\n\n###################\n#SET COLORS FOR SYNDROMES\n###################\nsymcols <- colorRampPalette(brewer.pal(8, \"Set1\"))(8)\nsymnames <- c(\"GI\", \"ILI\",\"Neuro\", \"Rash\", \"Resp\")\n\n###################\n#READ IN DATA FROM ESSENCE\n###################\nsetwd(originalwd) \n\nalless <- read.table(\"alless.txt\", sep= \",\", header=TRUE)\nalless2 <- read.table(\"alless2.txt\", sep= \",\", header=TRUE)\ngi <- read.table(\"gi.txt\", sep= \",\", header=TRUE)\nili <- read.table(\"ili.txt\", sep= \",\", header=TRUE)\nneuro <- read.table(\"neuro.txt\", sep= \",\", header=TRUE)\nrash <- read.table(\"rash.txt\", sep= \",\", header=TRUE)\nresp <- read.table(\"resp.txt\", sep= \",\", header=TRUE)\nroi <- read.table(\"roi.txt\", sep= \",\", \n                  header=TRUE, colClasses = \"character\")\nroi2 <- read.table(\"roi2.txt\", sep= \",\", \n                   header=TRUE, colClasses = \"character\")\n\n\n###################\n#ADD A CCDDCATEGORY COLUMN\n###################\ngi$cat <- \"gi\"\nili$cat <- \"ili\"\nneuro$cat <- \"neuro\"\nrash$cat <- \"rash\"\nresp$cat <- \"resp\"\n\n###################\n#CLEAN AND COMBINE RECORDS OF INTEREST\n###################\nroi2$Sex <- as.character(roi2$Sex)\nroi$Sex <- as.character(roi$Sex)\n\nroi <- rbind(roi, roi2)\n#roi$Sex[which(roi$Sex==\"FALSE\")] <- \"F\"\nrm(roi2)\n###################\n#READ IN BASELINE FILES\n###################\nsetwd(historicalwd)\n\n#alless1213 <- fread(\"alless1213updated.csv\")\n#symOld <- fread(\"symOldUpdated.csv\")\n\nalless1213 <- read.csv(\"alless1213updated.csv\")\nsymOld <- read.csv(\"symOldUpdated.csv\")\n\n#gi1213 <- read.csv(\"gi1213updated.csv\")\n#ili1213 <- read.csv(\"ili1213updated.csv\")\n#neuro1213 <- read.csv(\"neuro1213updated.csv\")\n#rash1213 <- read.csv(\"rash1213updated.csv\")\n#resp1213 <- read.csv(\"resp1213updated.csv\")\n\n###################\n#ADD A CCDDCATEGORY COLUMN\n###################\n#summary(symOld$cat)\n#gi1213$cat <- \"gi\"\n#ili1213$cat <- \"ili\"\n#neuro1213$cat <- \"neuro\"\n#rash1213$cat <- \"rash\"\n#resp1213$cat <- \"resp\"\n\n###################\n#READ IN GIS COORDINATES FOR ZIP CODES\n###################\nsetwd(giswd)\njoelatlong <- read.csv(\"joelatlong.csv\", header=TRUE, sep=\",\") #This is the GIS data for zip code\nsetwd(originalwd)\n\n###################\n#COMBINE THE 5 TRACKED SYMPTOM FILES\n###################\nsym <- as.data.frame(rbind(gi, ili, neuro, rash, resp))\n\n###################\n#FORMAT ALL DATES\n###################\nmydatefunction <- function(x){as.Date(x, \"%m/%d/%Y\")}\nmydatefunctionbl <- function(x){as.Date(x, \"%Y-%m-%d\")}\n\nsym$Date <- mydatefunction(sym$Date)\nalless$Date <- mydatefunction(alless$Date)\nalless2$Date <- mydatefunction(alless2$Date)\n\nroi$Date <- mydatefunction(roi$Date)\n\nalless1213$Date <- mydatefunctionbl(alless1213$Date)\nsymOld$Date <- mydatefunctionbl(symOld$Date)\n\ngi$Date <- mydatefunction(gi$Date)\nili$Date <- mydatefunction(ili$Date)\nneuro$Date <- mydatefunction(neuro$Date)\nrash$Date <- mydatefunction(rash$Date)\nresp$Date <- mydatefunction(resp$Date)\n\n#gi1213$Date <- mydatefunctionbl(gi1213$Date)\n#ili1213$Date <- mydatefunctionbl(ili1213$Date)\n#neuro1213$Date <- mydatefunctionbl(neuro1213$Date)\n#rash1213$Date <- mydatefunctionbl(rash1213$Date)\n#resp1213$Date <- mydatefunctionbl(resp1213$Date)\n\n\n###################\n#ASSIGN DAYS TO BE USED AS BASELINE PERIOD\n###################\nbl.range <- paste(paste(seq(yesterday-380, yesterday-351, 1), collapse=\"|\"),\n                  paste(seq(yesterday-745, yesterday-716, 1), collapse=\"|\"), sep=\"|\")\n\n#allessbl <- alless1213[which(grepl(bl.range, alless1213$Date) == TRUE),]\n#gibl <- gi1213[which(grepl(bl.range, gi1213$Date) == TRUE),]\n#ilibl <- ili1213[which(grepl(bl.range, ili1213$Date) == TRUE),]\n#neurobl <- neuro1213[which(grepl(bl.range, neuro1213$Date) == TRUE),]\n#rashbl <- rash1213[which(grepl(bl.range, rash1213$Date) == TRUE),]\n#respbl <- resp1213[which(grepl(bl.range, resp1213$Date) == TRUE),]\n\n###################\n#CLEAN UP RACE COLUMN\n###################\n\nblack <- \"BLA*|AFR*|*BLA|*AFR|Bla*|Afr*|*Bla*|*Afr\"\nwhite <- \"WHI*|CAUC*|*WHI|*CAUC|Whi*|Cauc*|*Whi|*Cauc\"\n\n#symOld\nsymOld$race <- factor(ifelse(regexpr(black, symOld$Race_flat) >0, \"black\",\n                             ifelse(regexpr(white, symOld$Race_flat) >0, \"white\",\n                                    \"other\")))\n\n#sym\nsym$race <- factor(ifelse(regexpr(black, sym$Race_flat) >0, \"black\",\n                          ifelse(regexpr(white, sym$Race_flat) >0, \"white\",\n                                 \"other\")))\n#alless\nalless$race <- factor(ifelse(regexpr(black, alless$Race_flat) >0, \"black\",\n                             ifelse(regexpr(white, alless$Race_flat) >0, \"white\",\n                                    \"other\")))\n\nalless1213$race <- factor(ifelse(regexpr(black, alless1213$Race_flat) >0, \"black\",\n                                 ifelse(regexpr(white, alless1213$Race_flat) >0, \"white\",\n                                        \"other\")))\n\n#alless2\nalless2$race <- factor(ifelse(regexpr(black, alless2$Race_flat) >0, \"black\",\n                              ifelse(regexpr(white, alless2$Race_flat) >0, \"white\",\n                                     \"other\")))\n\n\n###################\n#COMBINE THE OLD AND NEW DATA\n###################\nsymOld$X <- NULL\nalless1213$X <- NULL\n#gi1213$X <- NULL\n#ili1213$X <- NULL\n#neuro1213$X <- NULL\n#rash1213$X <- NULL\n#resp1213$X <- NULL\n\nalless1213 <- alless1213[,c(\"Date\", \"Age\", \"Zipcode\",\n                        \"MedRecNo\", \"Sex\", \"CCDD\",\n                        \"Region\", \"Time\", \"HalfHour\", \n                        \"Hospital\", \"Region.of.the.Hospital\",\n                        \"CCDDCategory_flat\", \"Race_flat\",\n                        \"Disposition.Category\",\n                        \"HospitalName\",\n                        \"HospitalZipCode\", \"race\")]\n\n\nalless <- alless[,c(\"Date\", \"Age\", \"Zipcode\",\n                            \"MedRecNo\", \"Sex\", \"CCDD\",\n                            \"Region\", \"Time\", \"HalfHour\", \n                            \"Hospital\", \"Region.of.the.Hospital\",\n                            \"CCDDCategory_flat\", \"Race_flat\",\n                            \"Disposition.Category\",\n                            \"HospitalName\",\n                            \"HospitalZipCode\", \"race\")]\n\n\nsym <- sym[,c(\"Date\", \"Age\", \"Zipcode\",\n                            \"MedRecNo\", \"Sex\", \"CCDD\",\n                            \"Region\", \"Time\", \"HalfHour\", \n                            \"Hospital\", \"Region.of.the.Hospital\",\n                            \"CCDDCategory_flat\", \"Race_flat\",\n                            \"Disposition.Category\",\n                            \"HospitalName\",\n                            \"HospitalZipCode\", \"race\", \"cat\")]\n\n\nsymOld <- symOld[,c(\"Date\", \"Age\", \"Zipcode\",\n                            \"MedRecNo\", \"Sex\", \"CCDD\",\n                            \"Region\", \"Time\", \"HalfHour\", \n                            \"Hospital\", \"Region.of.the.Hospital\",\n                            \"CCDDCategory_flat\", \"Race_flat\",\n                            \"Disposition.Category\",\n                            \"HospitalName\",\n                            \"HospitalZipCode\", \"race\", \"cat\")]\n\n\nsymOld <- rbind(symOld[which(symOld$Date < min(sym$Date)),], sym)\nalless1213 <- rbind(alless1213[which(alless1213$Date < min(alless$Date)),],alless)\n\n\n###################\n#WRITE HISTORICAL CSVs\n###################\nsetwd(historicalwd)\nwrite.csv(symOld, \"symOldUpdated.csv\")\nwrite.csv(alless1213, \"alless1213updated.csv\")\n\n\n###################\n#ASSIGN BL TO SYMOLD AND ALLESS1213\n###################\nsymOld$bl <- grepl(bl.range, symOld$Date) == TRUE\nalless1213$bl <- grepl(bl.range, alless1213$Date) == TRUE\n\n\n\n###################\n#MAP SET UP\n###################\nsetwd(\"E:/fdoh/private/surv/gis/alachuazipcodes\")\nzip.map <- readShapePoly(\"ACDPS_zipcode.shp\")\nzip.map$Zipcode <- zip.map$ZIP\nlabelpos <- data.frame(do.call(rbind, lapply(zip.map@polygons, function(x) x@labpt)))\nnames(labelpos) <- c(\"x\",\"y\")                        \nzip.map@data <- data.frame(zip.map@data, labelpos)\nzip.map$labelpos <- labelpos\nzip.map$labelposx <- labelpos$x\nzip.map$labelposy <- labelpos$y\nzippy <- unique(sort(zip.map$ZIP))\nzippy <- as.numeric(as.character(zippy))\nzip.map$text <- 1\nfor (i in zippy){zip.map$text[which(zip.map$ZIP == i)] <- i }\n\n\n###################\n#CREATE THE ZIP DATAFRAME FOR DATA BY ZIPCODE\n###################\nzip <- as.data.frame(zip.map$Zipcode)\ncolnames(zip) <- \"Zipcode\"\n\n###################\n# ADD COLUMN NAMES TO ZIP\n###################\nfor (i in tolower(symnames)){\n  for (j in c(\"\", \"week\", \"bl\", \"per\")){\n    zip[,paste0(i,j)] <- NA\n  }\n}\n\n###################\n# POPULATE WITH VALUES\n###################\n#YESTERDAY\nfor (i in zip$Zipcode){\n  for (j in tolower(symnames)){    \n    zip[which(zip$Zipcode == i),grepl(j, colnames(zip))==TRUE &\n          grepl(\"week\", colnames(zip)) == FALSE &\n          grepl(\"bl\", colnames(zip)) == FALSE &\n          grepl(\"per\", colnames(zip)) == FALSE] <-\n      nrow(sym[which(sym$cat == j &\n                       sym$Zipcode == i &\n                       sym$Date == yesterday),])}}\n\n#WEEK\nfor (i in zip$Zipcode){\n  for (j in tolower(symnames)){    \n    zip[which(zip$Zipcode == i),grepl(j, colnames(zip))==TRUE &\n          grepl(\"week\", colnames(zip)) == TRUE &\n          grepl(\"bl\", colnames(zip)) == FALSE  &\n          grepl(\"per\", colnames(zip)) == FALSE] <-\n      nrow(sym[which(sym$cat == j &\n                       sym$Zipcode == i &\n                       sym$Date <= yesterday &\n                       sym$Date >= yesterday-6),])}}\n\n\n#BL\nfor (i in zip$Zipcode){\n  for (j in tolower(symnames)){    \n    zip[which(zip$Zipcode == i),grepl(j, colnames(zip))==TRUE &\n          grepl(\"week\", colnames(zip)) == FALSE &\n          grepl(\"bl\", colnames(zip)) == TRUE  &\n          grepl(\"per\", colnames(zip)) == FALSE] <-\n      nrow(symOld[which(symOld$cat == j &\n                          symOld$Zipcode == i &\n                          symOld$bl == TRUE),])/length(strsplit(bl.range, \"[|]\")[[1]])}}\n\n#PER\nfor (j in tolower(symnames)){\n  zip[,grepl(j, colnames(zip))==TRUE &\n        grepl(\"week\", colnames(zip)) == FALSE &\n        grepl(\"bl\", colnames(zip)) == FALSE  &\n        grepl(\"per\", colnames(zip)) == TRUE] <- \n    (zip[,grepl(j, colnames(zip))==TRUE &\n           grepl(\"week\", colnames(zip)) == FALSE &\n           grepl(\"bl\", colnames(zip)) == FALSE  &\n           grepl(\"per\", colnames(zip)) == FALSE] + 0.0001) /\n    (zip[,grepl(j, colnames(zip))==TRUE &\n           grepl(\"week\", colnames(zip)) == FALSE &\n           grepl(\"bl\", colnames(zip)) == TRUE  &\n           grepl(\"per\", colnames(zip)) == FALSE] + 0.0001)\n}\n\n###################\n#SUBSET FOR JUST YESTERDAY'S CASES\n###################\ngiyest <- sym[which(sym$Date == yesterday &\n                      sym$cat == \"gi\"),]\ngiyest <- giyest[order(giyest$Zipcode),]\n\niliyest <- sym[which(sym$Date == yesterday &\n                      sym$cat == \"ili\"),]\niliyest <- iliyest[order(iliyest$Zipcode),]\n\nneuroyest <- sym[which(sym$Date == yesterday &\n                      sym$cat == \"neuro\"),]\nneuroyest <- neuroyest[order(neuroyest$Zipcode),]\n\nrashyest <- sym[which(sym$Date == yesterday &\n                      sym$cat == \"rash\"),]\nrashyest <- rashyest[order(rashyest$Zipcode),]\n\nrespyest <- sym[which(sym$Date == yesterday &\n                      sym$cat == \"resp\"),]\nrespyest <- respyest[order(respyest$Zipcode),]\n\n###################\n#HEAT DF\n###################\nheat <- as.data.frame(unique(sort(alless1213$Date)))\ncolnames(heat) <- \"Date\"\n\n#Create columns for each symname\nfor (i in tolower(symnames)){\n  heat[,i] <- NA}\n\n#Populate columns with daily cases\nfor (i in tolower(symnames)){\n  for (j in heat$Date){\n    heat[which(heat$Date == j),\n         colnames(heat[which(grepl(i, colnames(heat)) == TRUE)])] <-\n      nrow(symOld[which(symOld$cat == i &\n                          symOld$Date == j),])\n  }\n}\nheat <- heat[which(heat$Date < today),]\n\n###################\n#CREATE DIST DF FOR DISTRIBUTION OF BASELINE OBS (HISTOGRAMS)\n###################\ndist <- heat[which(grepl(bl.range, heat$Date)==TRUE),]\n\n############################################################\n####################\n\n###################\n# HEAT CALENDAR FUNCTION\n###################\n#MATH\n#CREATE THE CALENDAR HEAT FUNCTION (NOT MINE) ##############\ncalendarHeat <- function(dates, \n                         values, \n                         ncolors=99, \n                         color=\"g2r\", \n                         varname=\"Values\",\n                         date.form = \"%Y-%m-%d\", ...) {\n  require(lattice)\n  require(grid)\n  require(chron)\n  if (class(dates) == \"character\" | class(dates) == \"factor\" ) {\n    dates <- strptime(dates, date.form)\n  }\n  caldat <- data.frame(value = values, dates = dates)\n  min.date <- as.Date(paste(format(min(dates), \"%Y\"),\n                            \"-1-1\",sep = \"\"))\n  max.date <- as.Date(paste(format(max(dates), \"%Y\"),\n                            \"-12-31\", sep = \"\"))\n  dates.f <- data.frame(date.seq = seq(min.date, max.date, by=\"days\"))\n  \n  # Merge moves data by one day, avoid\n  caldat <- data.frame(date.seq = seq(min.date, max.date, by=\"days\"), value = NA)\n  dates <- as.Date(dates) \n  caldat$value[match(dates, caldat$date.seq)] <- values\n  \n  caldat$dotw <- as.numeric(format(caldat$date.seq, \"%w\"))\n  caldat$woty <- as.numeric(format(caldat$date.seq, \"%U\")) + 1\n  caldat$yr <- as.factor(format(caldat$date.seq, \"%Y\"))\n  caldat$month <- as.numeric(format(caldat$date.seq, \"%m\"))\n  yrs <- as.character(unique(caldat$yr))\n  d.loc <- as.numeric()                        \n  for (m in min(yrs):max(yrs)) {\n    d.subset <- which(caldat$yr == m)  \n    sub.seq <- seq(1,length(d.subset))\n    d.loc <- c(d.loc, sub.seq)\n  }  \n  caldat <- cbind(caldat, seq=d.loc)\n  \n  #color styles\n  r2b <- c(\"#0571B0\", \"#92C5DE\", \"#F7F7F7\", \"#F4A582\", \"#CA0020\") #red to blue                                                                               \n  r2g <- c(\"#D61818\", \"#FFAE63\", \"#FFFFBD\", \"#B5E384\")   #red to green\n  g2r <- rev(r2g)\n  w2b <- c(\"#045A8D\", \"#2B8CBE\", \"#74A9CF\", \"#BDC9E1\", \"#F1EEF6\")   #white to blue\n  w2b <- rev(w2b)\n  \n  assign(\"col.sty\", get(color))\n  calendar.pal <- colorRampPalette((col.sty), space = \"Lab\")\n  def.theme <- lattice.getOption(\"default.theme\")\n  cal.theme <-\n    function() {  \n      theme <-\n        list(\n          strip.background = list(col = \"transparent\"),\n          strip.border = list(col = \"transparent\"),\n          axis.line = list(col=\"transparent\"),\n          par.strip.text=list(cex=0.8))\n    }\n  lattice.options(default.theme = cal.theme)\n  yrs <- (unique(caldat$yr))\n  nyr <- length(yrs)\n  print(cal.plot <- levelplot(value~woty*dotw | yr, data=caldat,\n                              as.table=TRUE,\n                              aspect=.12,\n                              layout = c(1, nyr%%7),\n                              between = list(x=0, y=c(1,1)),\n                              strip=TRUE,\n                              main = paste(\"Calendar Heat Map of \", varname, sep = \"\"),\n                              scales = list(\n                                x = list(\n                                  at= c(seq(2.9, 52, by=4.42)),\n                                  labels = month.abb,\n                                  alternating = c(1, rep(0, (nyr-1))),\n                                  tck=0,\n                                  cex = 0.7),\n                                y=list(\n                                  at = c(0, 1, 2, 3, 4, 5, 6),\n                                  labels = c(\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\",\n                                             \"Friday\", \"Saturday\"),\n                                  alternating = 1,\n                                  cex = 0.6,\n                                  tck=0)),\n                              xlim =c(0.4, 54.6),\n                              ylim=c(6.6,-0.6),\n                              cuts= ncolors - 1,\n                              col.regions = (calendar.pal(ncolors)),\n                              xlab=\"\" ,\n                              ylab=\"\",\n                              colorkey= list(col = calendar.pal(ncolors), width = 0.6, height = 0.5),\n                              subscripts=TRUE\n  ) )\n  panel.locs <- trellis.currentLayout()\n  for (row in 1:nrow(panel.locs)) {\n    for (column in 1:ncol(panel.locs))  {\n      if (panel.locs[row, column] > 0)\n      {\n        trellis.focus(\"panel\", row = row, column = column,\n                      highlight = FALSE)\n        xyetc <- trellis.panelArgs()\n        subs <- caldat[xyetc$subscripts,]\n        dates.fsubs <- caldat[caldat$yr == unique(subs$yr),]\n        y.start <- dates.fsubs$dotw[1]\n        y.end   <- dates.fsubs$dotw[nrow(dates.fsubs)]\n        dates.len <- nrow(dates.fsubs)\n        adj.start <- dates.fsubs$woty[1]\n        \n        for (k in 0:6) {\n          if (k < y.start) {\n            x.start <- adj.start + 0.5\n          } else {\n            x.start <- adj.start - 0.5\n          }\n          if (k > y.end) {\n            x.finis <- dates.fsubs$woty[nrow(dates.fsubs)] - 0.5\n          } else {\n            x.finis <- dates.fsubs$woty[nrow(dates.fsubs)] + 0.5\n          }\n          grid.lines(x = c(x.start, x.finis), y = c(k -0.5, k - 0.5), \n                     default.units = \"native\", gp=gpar(col = \"grey\", lwd = 1))\n        }\n        if (adj.start <  2) {\n          grid.lines(x = c( 0.5,  0.5), y = c(6.5, y.start-0.5), \n                     default.units = \"native\", gp=gpar(col = \"grey\", lwd = 1))\n          grid.lines(x = c(1.5, 1.5), y = c(6.5, -0.5), default.units = \"native\",\n                     gp=gpar(col = \"grey\", lwd = 1))\n          grid.lines(x = c(x.finis, x.finis), \n                     y = c(dates.fsubs$dotw[dates.len] -0.5, -0.5), default.units = \"native\",\n                     gp=gpar(col = \"grey\", lwd = 1))\n          if (dates.fsubs$dotw[dates.len] != 6) {\n            grid.lines(x = c(x.finis + 1, x.finis + 1), \n                       y = c(dates.fsubs$dotw[dates.len] -0.5, -0.5), default.units = \"native\",\n                       gp=gpar(col = \"grey\", lwd = 1))\n          }\n          grid.lines(x = c(x.finis, x.finis), \n                     y = c(dates.fsubs$dotw[dates.len] -0.5, -0.5), default.units = \"native\",\n                     gp=gpar(col = \"grey\", lwd = 1))\n        }\n        for (n in 1:51) {\n          grid.lines(x = c(n + 1.5, n + 1.5), \n                     y = c(-0.5, 6.5), default.units = \"native\", gp=gpar(col = \"grey\", lwd = 1))\n        }\n        x.start <- adj.start - 0.5\n        \n        if (y.start > 0) {\n          grid.lines(x = c(x.start, x.start + 1),\n                     y = c(y.start - 0.5, y.start -  0.5), default.units = \"native\",\n                     gp=gpar(col = \"black\", lwd = 1.75))\n          grid.lines(x = c(x.start + 1, x.start + 1),\n                     y = c(y.start - 0.5 , -0.5), default.units = \"native\",\n                     gp=gpar(col = \"black\", lwd = 1.75))\n          grid.lines(x = c(x.start, x.start),\n                     y = c(y.start - 0.5, 6.5), default.units = \"native\",\n                     gp=gpar(col = \"black\", lwd = 1.75))\n          if (y.end < 6  ) {\n            grid.lines(x = c(x.start + 1, x.finis + 1),\n                       y = c(-0.5, -0.5), default.units = \"native\",\n                       gp=gpar(col = \"black\", lwd = 1.75))\n            grid.lines(x = c(x.start, x.finis),\n                       y = c(6.5, 6.5), default.units = \"native\",\n                       gp=gpar(col = \"black\", lwd = 1.75))\n          } else {\n            grid.lines(x = c(x.start + 1, x.finis),\n                       y = c(-0.5, -0.5), default.units = \"native\",\n                       gp=gpar(col = \"black\", lwd = 1.75))\n            grid.lines(x = c(x.start, x.finis),\n                       y = c(6.5, 6.5), default.units = \"native\",\n                       gp=gpar(col = \"black\", lwd = 1.75))\n          }\n        } else {\n          grid.lines(x = c(x.start, x.start),\n                     y = c( - 0.5, 6.5), default.units = \"native\",\n                     gp=gpar(col = \"black\", lwd = 1.75))\n        }\n        \n        if (y.start == 0 ) {\n          if (y.end < 6  ) {\n            grid.lines(x = c(x.start, x.finis + 1),\n                       y = c(-0.5, -0.5), default.units = \"native\",\n                       gp=gpar(col = \"black\", lwd = 1.75))\n            grid.lines(x = c(x.start, x.finis),\n                       y = c(6.5, 6.5), default.units = \"native\",\n                       gp=gpar(col = \"black\", lwd = 1.75))\n          } else {\n            grid.lines(x = c(x.start + 1, x.finis),\n                       y = c(-0.5, -0.5), default.units = \"native\",\n                       gp=gpar(col = \"black\", lwd = 1.75))\n            grid.lines(x = c(x.start, x.finis),\n                       y = c(6.5, 6.5), default.units = \"native\",\n                       gp=gpar(col = \"black\", lwd = 1.75))\n          }\n        }\n        for (j in 1:12)  {\n          last.month <- max(dates.fsubs$seq[dates.fsubs$month == j])\n          x.last.m <- dates.fsubs$woty[last.month] + 0.5\n          y.last.m <- dates.fsubs$dotw[last.month] + 0.5\n          grid.lines(x = c(x.last.m, x.last.m), y = c(-0.5, y.last.m),\n                     default.units = \"native\", gp=gpar(col = \"black\", lwd = 1.75))\n          if ((y.last.m) < 6) {\n            grid.lines(x = c(x.last.m, x.last.m - 1), y = c(y.last.m, y.last.m),\n                       default.units = \"native\", gp=gpar(col = \"black\", lwd = 1.75))\n            grid.lines(x = c(x.last.m - 1, x.last.m - 1), y = c(y.last.m, 6.5),\n                       default.units = \"native\", gp=gpar(col = \"black\", lwd = 1.75))\n          } else {\n            grid.lines(x = c(x.last.m, x.last.m), y = c(- 0.5, 6.5),\n                       default.units = \"native\", gp=gpar(col = \"black\", lwd = 1.75))\n          }\n        }\n      }\n    }\n    trellis.unfocus()\n  } \n  lattice.options(default.theme = def.theme)\n}\n\n###################\n# BASELINES AND MATH\n###################\nblgi <- sum(dist$gi) / length(dist$gi)\nblili <- sum(dist$ili) / length(dist$ili)\nblneuro <- sum(dist$neuro) / length(dist$neuro)\nblrash <- sum(dist$rash) / length(dist$rash)\nblresp <- sum(dist$resp) / length(dist$resp)\n\n\n#CREATE 5% AND 95% RANGES\nblgiq <- quantile(dist$gi, c(.05, .95), na.rm=T) \nbliliq <- quantile(dist$ili, c(.05, .95), na.rm=T) \nblneuroq <- quantile(dist$neuro, c(.05, .95), na.rm=T) \nblrashq <- quantile(dist$rash, c(.05, .95), na.rm=T) \nblrespq <- quantile(dist$resp, c(.05, .95), na.rm=T) \n\n###################\n#GEOGRAPHICAL FLAG\n###################\ngeoCluster <- as.data.frame(zip$Zipcode)\ncolnames(geoCluster) <- \"Zipcode\"\n\nfor (i in tolower(symnames)){\n  geoCluster[,i] <- \"\"\n}\n\n\n#I SHOULD BE USING REGRESSION!!!!\n#for (i in zip$Zipcode){\n#  for (j in tolower(symnames)){\n#    heat[,paste0(j,i)] <- NA  }}\n\n#for (i in zip$Zipcode){\n#for (j in tolower(symnames)){\n#    for (k in heat$Date){\n#      heat[which(heat$Date == k),\n#           paste0(j,i)] <-\n#        nrow(symOld[which(symOld$cat == j &\n#                            symOld$Zipcode == i &\n#                            symOld$Date == k),])}}}\n\n#save.image(\"E:/fdoh/private/blablabla.RDATA\")\n\n#I want to flag any zipcode with a symptom incidence of \n#greater than 4 cases (at 125% level)\n#or greater than 2 cases (at 150% level)\n#or greater than 1 case (at 200% level)\nfor (i in tolower(symnames)){\n  for (j in geoCluster$Zipcode){\n    geoCluster[which(geoCluster$Zipcode == j), i] <-\n      ifelse(zip[which(zip$Zipcode == j),paste0(i, \"per\")] > 1.25 &\n               zip[which(zip$Zipcode == j), i] > 4,\n             \"CHECK\",\n             ifelse(zip[which(zip$Zipcode == j),paste0(i, \"per\")] > 1.5 &\n                      zip[which(zip$Zipcode == j), i] > 2,\n                    \"CHECK\",\n                    ifelse(zip[which(zip$Zipcode == j),paste0(i, \"per\")] > 2 &\n                             zip[which(zip$Zipcode == j), i] > 1,\n                           \"CHECK\",\n                           \"\")))\n  }\n}\n\n\n\n###################\n#RECORD OF INTEREST TABLES\n###################\nroc <- roi[c(\"Date\", \"Age\", \"MedRecNo\", \"Sex\", \"CCDD\", \"Region\", \"Hospital\")]\nroc$Date <- as.character(roc$Date)\n\n###################\n#MAP PARAMETERS\n###################\n#joewatercolor <- openmap(c(29.96, -82.7), c(29.35,-81.9),\n#                         type=\"stamen-watercolor\")\n#joemapwatercolor <- openproj(joewatercolor, projection = \"+proj=longlat\")\n\n###################\n#WORD CLOUD\n###################\nremove <- \"[|]|[(]|[])]|/|;|:|[(*]|&|-[)]|[(]|[-]|[--])\"\nmyWords <- unlist(strsplit(as.character(gsub(remove,\"\",\n                                             toupper(alless$CCDD[which(alless$Date == yesterday)]))), \" \"))\n\nmyWordsBL <- unlist(strsplit(as.character(gsub(remove,\"\",\n                                               toupper(alless1213$CCDD[which(alless1213$bl == TRUE)]))), \" \"))\n\n\n\nmyWordsDF <- as.data.frame(table(myWords))\ncolnames(myWordsDF) <- c(\"word\",\"count\")\nmyWordsBLDF <- as.data.frame(table(myWordsBL))\ncolnames(myWordsBLDF) <- c(\"word\",\"count\")\ncombinedDF <- rbind(myWordsDF, myWordsBLDF)\n\nmyWordsTable <- table(myWords)\nmyWordsBLTable <- table(myWordsBL)\n\n\n\ncombinedWords <- c(myWords, myWordsBL)\n\nmyCloud <- as.data.frame(as.character(unique(sort(combinedWords))))\ncolnames(myCloud) <- \"word\"\n\n\nmyCloud$recent <- 0\nfor (i in myCloud$word){\n  myCloud$recent[which(myCloud$word == i)] <-\n    sum(myWordsDF$count[which(myWordsDF$word == i)])} \n\nmyCloud$bl <- 0\nfor (i in myCloud$word){\n  myCloud$bl[which(myCloud$word == i)] <-\n    sum(myWordsBLDF$count[which(myWordsBLDF$word == i)])/\n    length(unique(sort(alless1213$Date[which(alless1213$bl == TRUE)])))}\n\nmyCloud$prop <- 1+ ((myCloud$recent+0.9) / (myCloud$bl+0.9)) \nmyCloud$color <- ifelse(myCloud$recent <1,\n                        \"grey\",\n                        \"black\")\n\nmyCloud <- myCloud[which(myCloud$recent >0),]\nmyCloud <- myCloud[order(myCloud$prop),]\nmyCloud$word <- as.character(myCloud$word)\nmyCloud <- myCloud[which(nchar(myCloud$word) > 1),]\nmyCloud$recentCubicRoot <- myCloud$recent^(1/3)\n\nmyCloud$colorCat<- cut(myCloud$recentCubicRoot, 9, labels=FALSE)\ncloudColors <- colorRampPalette(brewer.pal(9, \"Blues\"))(11)\ncloudColors <- rev(cloudColors[1:11])\nmyCloud$color <- cloudColors[myCloud$colorCat]\nmyCloud <- myCloud[which(regexpr(paste0(\"AND|CANT|TODAY|ENCOUNTER|WITHOUT|\",\n                                        \"NOT|OF|LIKE|THERAPY|UNSPECIFIED|OR|IN\",\n                                        \"THIS|INITIAL|AT\"), myCloud$word) <1),]\n\nwordcloud(words=myCloud$word,\n          freq=myCloud$prop^3,\n          scale=c(2,0.00001),\n          max.words=Inf,\n          random.order=FALSE,\n          rot.per=0,\n          colors=myCloud$color[order(myCloud$prop^3)],\n          ordered.colors=FALSE)\n\n###################\n#FLAG TABLE\n###################\n\n#FUNCTION TO CONVERT TEXT TO REGEXPR SEARCH TERM\nregexFun <- function(x){\n  paste(substr(x,1,5),\"*\",\"|\",\n        tolower(substr(x,1,5)),\"*|\",\n        capwords(tolower(substr(x, 1,5))),\"*\",sep=\"\", collapse=NULL)}\n\n\nwordsOfInterest <- as.data.frame(myCloud[which(ifelse(myCloud$bl <=0, \n                                                      myCloud$recent >= 3, \n                                                      myCloud$recent > 3*(myCloud$bl)) & \n                                                 myCloud$recent >= 3),])\nwordsOfInterest <- wordsOfInterest[order(wordsOfInterest$recent,\n                                         decreasing=TRUE),]\n\nflag <- as.data.frame(cbind(wordsOfInterest$word,\n                            wordsOfInterest$recent,\n                            round(wordsOfInterest$bl, digits=2)))\ncolnames(flag) <- c(\"Word\", \"Yesterday\", \"Baseline\")\nflag$Baseline <- as.numeric(as.character(flag$Baseline))\n\n#CAPITALIZE FIRST LETTER FUNCTION\ncapwords <- function(s, strict = FALSE) {\n  cap <- function(s) paste(toupper(substring(s, 1, 1)),\n{s <- substring(s, 2); if(strict) tolower(s) else s},\nsep = \"\", collapse = \" \" )\nsapply(strsplit(s, split = \" \"), cap, USE.NAMES = !is.null(names(s)))}\n\n\n#CREATE SEARCH TERMS\nheat30 <- heat[which(heat$Date > max(heat$Date)-30),]\n\nflagSearch <- as.data.frame(matrix(rep(NA, length(flag$Word)*30), nrow=30))\ncolnames(flagSearch) <-flag$Word\nflagSearch <- cbind(heat30$Date, flagSearch)\ncolnames(flagSearch)[1] <- \"Date\"\n\nnewColStart <- length(colnames(heat30))+1\nnewColEnd <- length(colnames(heat30))+length(flagSearch$Word)\n#colnames(heat30)[newColStart:newColEnd] <-  flagSearch$Word\n\n\nfor(i in flagSearch$Date){\n  for (j in colnames(flagSearch[2:(length(flag$Word)+1)])){\n    flagSearch[which(flagSearch$Date == i),j] <-\n      nrow(alless1213[which(alless1213$Date == i &\n                              regexpr(regexFun(j), alless1213$CCDD)>=0),])}}\npar(mar=c(2,2,2,1))\npar(mfrow=c(ceiling(length(flag$Word)/3),3))\nfor (i in colnames(flagSearch[2:(length(flag$Word)+1)])){\n  plot(flagSearch$Date, flagSearch[,i], main=i, xlab=\"Date\", ylab=\"Cases\", lty=6,\n       lwd=1, col=adjustcolor(\"red\", alpha.f=0.6), type=\"l\", xaxt=\"n\")\n  points(flagSearch$Date, flagSearch[,i], pch=16, cex=1, col=adjustcolor(\"black\", alpha.f=0.4))\n  axis(side=1, at=flagSearch$Date, labels=format(flagSearch$Date, format=\"%d %b\"), las=3, cex.axis=0.4)\n  abline(h=flag$Baseline[which(flag$Word == i)], lwd=3, col=adjustcolor(\"blue\", alpha.f=0.2))\n  legend(x=\"topleft\", bty=\"n\", border=FALSE, cex=0.6, lwd=3, col=adjustcolor(\"blue\", alpha.f=0.2),\n         legend=\"2012 seasonal baseline\")}\npar(mfrow=c(1,1))\n\n###################\n#ILI YEAR TO YEAR COMPARISON\n###################\nheat$j <- as.numeric(format(heat$Date, format=\"%j\"))\n\n#2013\n#ili13= spm(heat$ili[which(heat$Date >= \"2013-01-01\")]~\n#             f(heat$j[which(heat$Date >= \"2013-01-01\")], spar=20), omit.missing=TRUE)\n#2012\n#ili12= spm(heat$ili[which(heat$Date < \"2013-01-01\" &\n#                            heat$Date >= \"2012-01-01\")]~\n#             f(heat$j[which(heat$Date < \"2013-01-01\" &\n#                              heat$Date >= \"2012-01-01\")], spar=20), omit.missing=TRUE)\n\n#plot(heat$j, heat$ili, type=\"n\", main=\"ILI: 2012 vs. 2013\",\n#     xlab=\"Date\", ylab=\"Daily cases\", xlim=c(250,365))\n#points(heat$j[which(heat$Date < \"2013-01-01\")],\n#       heat$ili[which(heat$Date < \"2013-01-01\")],\n#       pch=16, col=adjustcolor(\"dodgerblue3\", alpha.f=0.3))\n#points(heat$j[which(heat$Date > \"2013-01-01\")],\n#       heat$ili[which(heat$Date > \"2013-01-01\")],\n#       pch=16, col=adjustcolor(\"darkred\", alpha.f=0.3))\n#lines(ili12,shade.col=adjustcolor(\"dodgerblue3\", alpha.f=0.3),\n#      rug.col=\"blue\", col=\"blue\")\n#lines(ili13,shade.col=adjustcolor(\"darkred\", alpha.f=0.3),\n#      rug.col=\"darkred\", col=\"darkred\")\n\n#legend(x=\"topleft\", pch=16, col=c(\"dodgerblue2\", \"darkred\"),\n#       legend=c(\"2012\", \"2013\"), lwd=2)\n\n###################\n#\n###################\n\n\n###################\n#\n###################\njj <- map(\"county\", \"florida\")\nplot(jj, type=\"l\")\n\n###################\n# FUNCTION TIME!!!!\n###################\n\n#### MapCases\nMapCases <- function(variable, color){\n  plotvar <- variable\n  nclr <- max(plotvar+1, na.rm=TRUE) # number of bins\n  plotclr <- c(\"white\", brewer.pal(nclr, color))\n  cuts <- cut(plotvar, breaks=nclr,labels=FALSE)\n  mapCols <- plotclr[cuts]\n  plot(zip.map, border=\"grey\", col=mapCols, main=\"Cases yesterday\")\n  legend(\"bottomleft\", # position\n         legend = seq(0,max(plotvar, na.rm=TRUE), 1), \n         title = \"Cases\",\n         fill = plotclr,\n         cex = 1 - (0.03*max(plotvar, na.rm=TRUE)),\n         bty = \"n\",\n         border=\"grey\") # border\n}\n\n#### MapCasesWeek\nMapCasesWeek <- function(variable, color){\n  plotvar<-variable\n  nclr<- 5 # number of bins (3-8)\n  min<- floor(min(plotvar))\n  max<- ceiling(max(plotvar))\n  breaks<- (max-min) / nclr\n  plotclr<- brewer.pal(nclr, color)\n  class<- classIntervals(plotvar, nclr, style =\"fixed\", fixedBreaks=seq(min, max, breaks))\n  \n  colcode<- findColours(class, plotclr)\n  colcode2<-gsub(\",\",\"-\", gsub(\"[[]|[)]|[]]\",\"\", names(attr(colcode, \"table\"))))\n  \n  plot(zip.map, border=\"grey\", col=colcode, main=\"Cases yesterday\")\n  legend(\"bottomleft\", # position\n         legend = colcode2, \n         title = \"Cases\",\n         fill = plotclr,\n         cex = 0.6,\n         bty = \"n\",\n         border=\"grey\") # border\n}\n\n\n\n\n#MapProp\nMapProp <- function(variable, color){\n  plotvar <- variable\n  nclr <- 5# number of bins\n  plotcat <- ifelse(variable==0, 0,\n                    ifelse(variable >0 & variable <1, 1,\n                           ifelse(variable==1, 2,\n                                  ifelse(variable>1 & variable <=2, 3,\n                                         ifelse(variable>2, 4,\n                                                0))))) \n  plotclr <- c(\"white\", brewer.pal(4, color))\n  cuts <- cut(plotvar, breaks=nclr,labels=FALSE)\n  mapCols <- plotclr[cuts]\n  legText <- as.character(100*seq(0,4, 1))\n  legText <- c(\"0\",\n               \"< 100\",\n               \"100\",\n               \"101 - 200\",\n               \"> 200\")\n  plot(zip.map, border=\"grey\", col=mapCols, main=\"Yesterday relative to baseline\")\n  legend(\"bottomleft\", # position\n         legend = legText, \n         title = \"Cases\\n(% of expected)\",\n         fill = plotclr,\n         cex = 0.56,\n         bty = \"n\",\n         border=\"grey\") # border\n}\n\n\n\n############ DETAILS\npar(mfrow=c(1,1))\n\n\n\n\n\nHistFun <- function(variable, color){\n  hist(variable, breaks=15, col=adjustcolor(\"black\", alpha.f=0.5),\n       main=\"Cases\", cex.lab=0.6, cex.main=0.8,\n       xlab=\"Baseline daily cases\",\n       ylab=\"Frequency\", border=FALSE)\n  abline(v=heat$gi[which(heat$Date == yesterday)], lwd=14, lty=1,\n         col=adjustcolor(color, alpha.f=0.5))\n  legend(x=\"topright\",\n         lty=1, lwd=3, legend=\"Yesterday's\\nobservation\", cex=0.5, \n         col=adjustcolor(color, alpha.f=0.5),bty=\"n\")\n}\n\nAgeHistFun <- function(variable, baseline, color){\n  hist(baseline, main=\"Age\", cex.main=0.8, col=adjustcolor(\"black\", alpha.f=0.5), border=FALSE,\n       ylab=\"Frequency\", xlab=\"Age\", freq=FALSE, cex.lab=0.6)\n  hist(variable,\n       col=adjustcolor(color, alpha.f=0.4), ylab=\"frequency\", xlab=\"age\", freq=FALSE, add=TRUE,\n       border=FALSE)\n  legend(x=\"topright\", fill=adjustcolor(c(\"black\", color), alpha.f=0.5), bty=\"n\", border=FALSE,\n         legend=c(\"2012 baseline\", \"Yesterday\"), cex=0.6)\n}\n\nTimeHistFun <- function(variable, baseline, color){\n  hist(baseline, freq=FALSE, border=FALSE, col=adjustcolor(\"black\", alpha.f=0.5), \n       main=\"Check-in time\", xlab=\"Time of day\", ylab=\"Frequency\", xaxt=\"n\", ylim=c(0,0.06), cex=0.6, cex.main=0.8,\n       cex.lab=0.6)\n  hist(variable, freq=FALSE, border=FALSE, \n       col=adjustcolor(color, alpha.f=0.5), xaxt=\"n\", add=TRUE, ylim=c(0,0.06))\n  axis(1, at=c(1,12,24,36,50), labels=c(\"midnight\",\"6am\",\"noon\",\"6pm\",\"midnight\"), cex.axis=0.6)\n  legend(x=\"topright\", fill=adjustcolor(c(\"black\", color), alpha.f=0.5), bty=\"n\", border=FALSE,\n         legend=c(\"2012 baseline\", \"Yesterday\"), cex=0.6)\n  \n}\n\nSexFun <- function(variable, baseline, color){\n  prop <- table(baseline)/length(baseline) \n  barplot(prop, ylim=c(0,1), col=adjustcolor(\"black\",alpha.f=0.5), border=FALSE)\n  prop <- table(variable)/length(variable)\n  barplot(prop, ylim=c(0,1), col=adjustcolor(color,alpha.f=0.5), add=TRUE, border=FALSE, \n          main=\"Sex\", cex.main=0.8, xlab=NA)\n  legend(x=\"topright\", fill=adjustcolor(c(\"black\", color), alpha.f=0.5), \n         legend=c(\"2012 baseline\", \"Yesterday\"), border=FALSE, bty=\"n\", cex=0.6)\n}\n\n\nSexFun <- function(variable, baseline, color){\n  variable <- factor(variable, levels=c(\"F\", \"M\"))\n  baseline <- factor(baseline, levels=c(\"F\", \"M\"))\n  prop <- table(baseline)/length(baseline) \n  barplot(prop, ylim=c(0,1), col=adjustcolor(\"black\",alpha.f=0.5), border=FALSE)\n  prop <- table(variable)/length(variable)\n  barplot(prop, ylim=c(0,1), col=adjustcolor(color,alpha.f=0.5), add=TRUE, border=FALSE, \n          main=\"Sex\", cex.main=0.8, xlab=NA)\n  legend(x=\"topright\", fill=adjustcolor(c(\"black\", color), alpha.f=0.5), \n         legend=c(\"2012 baseline\", \"Yesterday\"), border=FALSE, bty=\"n\", cex=0.6)\n}\n\n\nRaceFun <- function(variable, baseline, color){\n  \n  prop <- table(baseline)/length(baseline) \n  barplot(prop, ylim=c(0,1), col=adjustcolor(\"black\",alpha.f=0.5), border=FALSE,\n          xaxt=\"n\")\n  prop <- table(variable)/length(variable)\n  barplot(prop, ylim=c(0,1), col=adjustcolor(color,alpha.f=0.5), add=TRUE, border=FALSE, \n          main=\"Race\", cex.main=0.8)\n  legend(x=\"topright\", fill=adjustcolor(c(\"black\", color), alpha.f=0.5), \n         legend=c(\"2012 baseline\", \"Yesterday\"), border=FALSE, bty=\"n\", cex=0.6)\n}\n\nTimeSeriesFun <- function(variable, color){\n  plot(heat$Date, variable, type=\"n\", xlab=\"Date\", ylab=\"Cases\",\n       xlim=c(yesterday-q, yesterday), cex.axis=0.75, cex.main=0.8, cex.lab=0.6)\n  axis(side=1, at=heat$Date, labels=format(heat$Date, format=\"%d\\n%b\"), cex.axis=0.6)\n  lines(heat$Date, variable, lty=1, col=\"darkgrey\")\n  points(heat$Date, variable, pch=1, col=\"black\")\n  points(heat$Date, variable, pch=20, col=color)\n  mm <- c(c(heat$Date, today), c(today,rev(heat$Date)))\n  zzblq <-c(rep(min(quantile(variable[which(heat$Date <= today - 351 &\n                                              heat$Date >= today - 380)],\n                             c(.05, .95), na.rm=T)),length(heat$Date)+1), \n            rev(rep(max(quantile(variable[which(heat$Date <= today - 351 &\n                                                  heat$Date >= today - 380)],\n                                 c(.05, .95), na.rm=T)),length(heat$Date)+1)))\n  polygon(mm, zzblq, col=adjustcolor(color, alpha.f=0.3), border=FALSE)\n  abline(h=sum(variable[which(heat$Date <= today - 351 &\n                                heat$Date >= today - 380)])/30, \n         col=adjustcolor(color, alpha.f=0.3), lty=1, lwd=5)\n  legend(x=\"topright\", legend=c(\"Expected\", \"Normal variation\"),\n         lty=c(1,1), col=c(color,adjustcolor(color, alpha.f=0.3)), ncol=1,\n         x.intersp=0.2, y.intersp=0.8, bor=T,cex=0.6, lwd=c(1,4), bty=\"n\")  \n}\n\n\nHistFun(variable = dist$gi, \n        color = symcols[1])\n\nAgeHistFun(variable = giyest$Age,\n           baseline = symOld$Age[which(symOld$bl == TRUE &\n                                         symOld$cat == \"gi\")],\n           color = symcols[1])\n\nTimeHistFun(variable = giyest$HalfHour,\n            baseline = symOld$HalfHour[which(symOld$bl == TRUE &\n                                               symOld$cat == \"gi\")],\n            color = symcols[1]) \n\nSexFun(variable = giyest$Sex,\n       baseline = symOld$Sex[which(symOld$bl == TRUE &\n                                     symOld$cat == \"gi\")],\n       color= symcols[1])\n\nRaceFun(variable = giyest$race,\n        baseline = symOld$race[which(symOld$bl == TRUE &\n                                       symOld$cat == \"gi\")],\n        color=symcols[1])\n\nTimeSeriesFun(variable = heat$gi,\n              color=symcols[1])\n\n\n\n###################\n#\n###################\n\n\n\n###################\n#\n###################\n\n\n\n###################\n#\n###################\n\n\n\n###################\n#\n###################\n\n\n\n###################\n#\n###################\n\n\n\n###################\n#\n###################\n\n\n\n###################\n#MAKE OVERALL (LAST 7 days)\n###################\noverall <- heat[which(heat$Date > yesterday - 7),]\n\n\n###################\n#WEEKLY AND DAILY BARPLOT\n###################\nweeklysums <- c(\n  (sum(overall$gi)/blgi/7)*100,\n  (sum(overall$ili)/blili/7)*100,\n  (sum(overall$neuro)/blneuro/7)*100,\n  (sum(overall$rash)/blrash/7)*100,\n  (sum(overall$resp)/blresp/7)*100)\nweeklysums <-round(weeklysums, digits=1)\n\ndailysums <- c(\n  (overall$gi[7]/blgi)*100,\n  (overall$ili[7]/blili)*100,\n  (overall$neuro[7]/blneuro)*100,\n  (overall$rash[7]/blrash)*100,\n  (overall$resp[7]/blresp)*100)\ndailysums <-round(dailysums, digits=1)\n\n###################\n#\n###################\nrabies <- alless1213[which(regexpr(\"rabies*|RABIES*|Rabies*|bite*|Bite*|BITE*\", alless1213$CCDD)>0 &\n                             grepl(\"insect|INSECT\", alless1213$CCDD) == FALSE),]\nrabiesyest <- rabies[which(rabies$Date == yesterday),]\nrabies7 <- rabies[which(rabies$Date >= yesterday-6),]\n\n\n\n\n#emesis <- alless1213[which(regexpr(\"emesis|EMESIS|Emesis\", alless1213$CCDD)>0),]\n\n#for (i in heat$Date){\n#  heat$emesis[which(heat$Date == i)] <-\n#    nrow(emesis[which(emesis$Date == i),])}\n#emesisyest <- emesis[which(emesis$Date == yesterday),]\n\n# FUNCTION FOR EXAMINING ANY TERM IN DEPTH\nnadiaFun <- function(x){\n  y <- alless1213[which(regexpr(regexFun(x), alless1213$CCDD)>0),]\n  z <- y[which(y$Date == yesterday),]\n  View(z)}\n\nexamineFun <- function(x){\n   alless1213[which(regexpr(regexFun(x), alless1213$CCDD)>0 &\n                      alless1213$Date > yesterday - 6),]\n}\n\nspice <- examineFun(\"MARIJUANA|SYNTHETIC|K2|SPICE\")\n\n\n#nadiaFun(\"SCABIES\")\n#nadiaFun(\"BITE\")\n#nadiaFun(\"STREP\")\n\n\n\n\n\n####################\n# MERS detection\n####################\nmersWords <- paste(regexFun(c(\"Saudi\",\"Arab\",\"Emirat\",\"UAE\",\"Qatar\",\"Oman\",\n                        \"Jordan\",\"Kuwait\",\"Yemen\",\"Leban\",\"Lebon\",\"Middle\",\n                        \"mers\", \"MERS\", \"Mers\")), collapse=\"|\")\nmersSymptoms <- paste(regexFun(c(\"respir\",\"severe\",\"sob\",\"shortness\",\"breath\",\n                                \"fever\",\"pneumo\",\"diar\",\"vomit\",\"naus\")),\n                               collapse=\"|\")\nmers <- alless[which(grepl(mersWords, alless$CCDD) == TRUE &\n                       grepl(mersSymptoms, alless$CCDD) == TRUE),] \n\nmers2 <- alless2[which(grepl(mersWords, alless2$CCDD) == TRUE &\n                       grepl(mersSymptoms, alless2$CCDD) == TRUE),] \n\nmers <- rbind(mers,mers2)\n\n\nnrow(mers)\n######################\n#******SAVE\n#******IMAGE\n######################\nsave.image(paste(\"E:/fdoh/private/surv/\",\n                 today,\n                 \"/\",\n                 \"zap.Rdata\", sep=\"\"))\n\npar(mfrow=c(1,1))\n\ntot.time <- as.numeric(Sys.time() - start.time)\ncat(paste0(\"\\n\\n\\n\\n\\n\\n\\n\\n\",  \"Congratulations!!!\", \n           \"\\n\", \"That took about \", round(tot.time, digits=0), \" minutes\",\n           \"\\n\\n\",\n           \"Now you can run the zap.Rnw file in order to produce a surveillance report\",\n           \"\\n\\n\\n\") )\n\n\n",
    "created" : 1409682145928.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2028325259",
    "id" : "A2721D9B",
    "lastKnownWriteTime" : 1404743676,
    "path" : "E:/fdoh/private/surv/2014-09-02/zap.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}