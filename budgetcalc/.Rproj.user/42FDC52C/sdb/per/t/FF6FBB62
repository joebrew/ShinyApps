{
    "contents" : "############\n# THE FOLLOWING SCRIPT READS IN EACH DATE'S TRAP DATA\n# (WHICH SHOULD BE INDIVIDUALLY SAVED IN THE \n# /mosquito/historical FOLDER WITH NOTHING ELSE)\n# AND COMBINES THEM INTO ONE MASTER DATAFRAME\n# (NAMED raw.dat)\n#\n# DATA IN EACH CSV SHOULD HAVE COLUMN NAMES OF\n# mosquito, site1, site2,... siteN, code\n############\n\n\n############\n# SET WD TO WHERE I HAVE ALL YEARS OF MOSQUITO DATA\n############\nsetwd(\"E:/fdoh/public/mosquito/historical\")\n\n############\n# READ IN ALL DATA INTO LIST\n############\ntemp = list.files(pattern=\"*.csv\")\nmyfiles = lapply(temp, read.csv, skip=1)\nmyfileswithdate = lapply(temp, read.csv, skip=0)\n\n############\n# MAKE A NUMBER OF TRAPS COLUMN\n############\nfor (i in 1:length(myfiles)){\n  myfiles[[i]]$nTraps <-\n    ncol(myfiles[[i]]) - 2\n}\n\n\n############\n#ADD DATE COLUMN\n############\nfor (i in 1:length(myfiles)){\n  myfiles[[i]]$date <- \n    as.Date(gsub(\"X\", \"\",colnames(myfileswithdate[[i]])[1]),\n            format=\"%m.%d.%Y\")\n}\n\n############\n#CBIND ALL ELEMENTS OF THE MYFILES LIST INTO ONE DF\n############\nlibrary(plyr)\nraw.dat <- rbind.fill(myfiles)\n\n############\n#CODE ALL \"OTHER\" MOSQUITOES AS 100\n############\nraw.dat$code[which(grepl(\"other|Other|OTHER\", \n                         raw.dat$mosquito))] <-  100\n\n# ############\n# # WRITE A CSV FOR CESAR ESCOBAR (24 June 2014)\n# ############\n# setwd(\"E:/fdoh/public/mosquito/cesar\")\n# write.csv(raw.dat, \"raw_data.csv\")\n\n############\n# MAKE A TIME SERIES DF\n############\nts <- as.data.frame(unique(sort(raw.dat$date)))\ncolnames(ts) <- \"date\"\n\n############\n# POPULATE TS WITH TOTAL NUMBER OF TRAPS\n############\nfor (i in ts$date){\n  ts$nTraps[which(ts$date == i)] <-\n    raw.dat$nTraps[which(raw.dat$date == i)][1]\n}\n\n############\n# POPULATE WITH TOTAL NUMBER OF MOSQUITOES\n############\nfor (i in ts$date){\n  ts$tot[which(ts$date == i)] <-\n    sum(raw.dat[which(raw.dat$date == i),\n                grepl(\"site\", colnames(raw.dat))], na.rm=TRUE)\n  \n}\n\n############\n# POPULATE WITH EACH KIND OF MOSQUITO \n############\nfor (i in unique(sort(raw.dat$code))){\n  ts[,paste0(\"code\", i)] <- NA  \n}\n\nfor (i in ts$date){\n  for (j in unique(sort(raw.dat$code))){  \n    \n    ts[which(ts$date == i),\n       paste0(\"code\", j)] <- ifelse(\n         nrow(raw.dat[which(raw.dat$date == i &\n                              raw.dat$code == j),]) == 0,\n         0,\n         sum(raw.dat[which(raw.dat$date == i &\n                             raw.dat$code == j),\n                     colnames(raw.dat[which(grepl(\"site\", colnames(raw.dat)))])],\n             na.rm=TRUE))\n  }\n}\n#this ifelse statement was necessary due to \n#the fact that many dates did not have a row in which\n#code was equal to j\n\n\n############\n# POPULATE WITH N MOSQUITOES PER TRAP \n############\nfor (i in as.numeric(gsub(\"site\", \"\",colnames(raw.dat[which(grepl(\"site\", \n                                                                  colnames(raw.dat)))])))){\n  ts[,paste0(\"site\", i)] <- NA\n}\n\nfor (i in ts$date){\n  for (j in as.numeric(gsub(\"site\", \"\",colnames(raw.dat[which(grepl(\"site\", colnames(raw.dat)))])))){\n    ts[which(ts$date == i),\n       paste0(\"site\",j)] <-\n      sum(raw.dat[which(raw.dat$date == i),\n                  paste0(\"site\", j)], na.rm=TRUE)\n    \n  }\n}\n\n\n############\n# POPULATE WITH EACH KIND OF MOSQUITO AT EACH TRAP\n############\n\nfor (i in unique(sort(raw.dat$code))){\n  for (j in as.numeric(gsub(\"site\", \"\",colnames(raw.dat[which(grepl(\"site\", colnames(raw.dat)))])))){\n    ts[,paste0(\"code\", i, \"site\", j)] <- NA    \n  }\n}\n\nfor (i in ts$date){\n  for (j in as.numeric(gsub(\"site\", \"\",colnames(raw.dat[which(grepl(\"site\", colnames(raw.dat)))])))){\n    for (k in unique(sort(raw.dat$code))){\n      \n      ts[which(ts$date == i),\n         paste0(\"code\", k, \"site\", j)] <-\n        \n        ifelse(nrow(raw.dat[which(raw.dat$date == i &\n                                    raw.dat$code == k),]) == 0,\n               0,\n               sum(raw.dat[which(raw.dat$date == i &\n                                   raw.dat$code == k),\n                           paste0(\"site\", j)],  na.rm=TRUE)\n        )\n    } \n  }\n}\n\n#############\n# READ IN DISEASE INFORMATION\n#############\nvec <- read.csv(\"E:/fdoh/public/mosquito/benVectors.csv\", sep=\";\")\ncolnames(vec) <- c(\"code\", \"name\", \"wnv\", \"slev\", \"eeev\", \"chik\", \"malaria\", \"dengue\", \"yellow\")\n\n############\n# POPULATE WITH N OF VECTORS PER DAY \n############\n\n#CREATE NEW COLUMNS FOR EACH VECTOR IN raw.dat\nfor (i in colnames(vec[which(grepl(\"code|name\", colnames(vec))==FALSE)])){\n  raw.dat[,i] <- NA\n}\n\n#POPULATE BOOLEAN DISEASE COLUMNS IN raw.dat\nfor (i in unique(sort(raw.dat$code))){\n  for (j in rev(colnames(vec))[1:7]){\n    raw.dat[which(raw.dat$code == i), j] <-\n      vec[which(vec$code == i),j]\n  }\n}\n\n#CREATE NEW COLUMNS FOR EACH VECTOR IN ts\nfor (i in colnames(vec[which(grepl(\"code|name\", colnames(vec))==FALSE)])){\n  ts[,i] <- NA\n}\n\n#POPULATE ts WITH TOTAL NUMBER OF EACH DISEASE TYPE\nfor (i in ts$date){\n  for (j in rev(colnames(ts))[1:7]){\n      ts[which(ts$date == i), j] <-\n        sum(raw.dat[which(raw.dat$date == i &\n                            raw.dat[,j] == TRUE),\n                    colnames(raw.dat[which(grepl(\"site\", colnames(raw.dat)))])],\n                    na.rm=TRUE)  \n  }\n}\n\n###################\n# POPULATE ts WITH DISEASE TYPE AT EACH SITE\n###################\n\nfor (i in rev(colnames(vec))[1:7]){\n  for (j in as.numeric(gsub(\"site\", \"\",colnames(raw.dat[which(grepl(\"site\", colnames(raw.dat)))])))){\n    ts[,paste0(i, \"site\", j)] <- NA    \n  }\n}\n\nfor (i in ts$date){\n  for (j in as.numeric(gsub(\"site\", \"\",colnames(raw.dat[which(grepl(\"site\", colnames(raw.dat)))])))){\n    for (k in rev(colnames(vec))[1:7]){\n      \n      ts[which(ts$date == i),\n         paste0(k, \"site\", j)] <-\n        \n        ifelse(nrow(raw.dat[which(raw.dat$date == i &\n                                    raw.dat[,k] == TRUE),]) == 0,\n               0,\n               \n               \n               sum(raw.dat[which(raw.dat$date == i & \n                                   raw.dat[,k] == TRUE), \n                           paste0(\"site\", j) ], na.rm=TRUE)\n        )\n    } \n  }\n}\n\n\n\n############\n# ADD A year COLUMN TO TS\n############\nts$year <- as.numeric(format(ts$date, format=\"%Y\"))\n\n\n############\n# ADD A day COLUMN TO TS\n############\nts$day <- as.numeric(format(ts$date, format=\"%j\"))\n\n############\n# WRITE A CSV FOR CESAR ESCOBAR (24 June 2014)\n############\n# setwd(\"E:/fdoh/public/mosquito/cesar\")\n# write.csv(ts, \"time_series.csv\")\n\n############\n# ADD A COLOR TO EACH ROW OF TS (BY YEAR)\n############\nlibrary(RColorBrewer)\nyearcols <- brewer.pal(length(unique(sort(ts$year))), \"Set3\")\n\nts$col <- NA\nfor (i in 1: length(unique(sort(ts$year)))){\n  ts$col[which(ts$year == unique(sort(ts$year))[i])] <-\n    yearcols[i]\n    \n}\n\n\n############\n# CREATE A SIMPLE DF LINKING $code TO MOSQUITO NAME\n# ############\n# id <- as.data.frame(unique(sort(raw.dat$code)))\n# colnames(id) <- \"code\"\n# \n# id$name <- NA\n# for (i in id$code){\n#   id$name[which(id$code == i)] <-\n#     as.character(raw.dat$mosquito[which(raw.dat$code == i)])[1]\n# }\n# \n# id$name <- gsub(\"Cx coronator|[()]\", \"\", id$name)\n# write.csv(id, \"E:/workingdirectory/mosquito/id.csv\")\n\n#############\n# READ IN MOSQUITO ID INFO\n#############\n#id <- read.csv(\"E:/workingdirectory/mosquito/id.csv\")\n\n\n############\n# READ IN TRAP LOCATION DATA\n############\nloc <- read.csv(\"E:/fdoh/public/mosquito/traplatlong.csv\")\n\n\n############\n# READ IN RAINFALL / TEMP DATA FROM 2008-13\n############\nrt <- read.csv(\"E:/fdoh/public/mosquito/rainAndTemp/rainAndTempUpdated.csv\")\nrt$date <- as.Date(rt$date, format=\"%Y-%m-%d\")\n\n##############\n# ADD MORE RECENT RAINFALL\n##############\nlibrary(weatherData)\n#getWeatherForDate(\"GNV\", \"2014-04-14\")\nnewTemp <- getSummarizedWeather(\"GNV\", start_date = max(rt$date) + 1, \n                     end_date = Sys.Date() - 1,\n                     opt_custom_columns = TRUE,\n                     custom_columns = c(2,4,20))\n\n############\n#CLEAN UP newTemp A BIT SO AS TO MERGE WITH RT\n############\nnewTemp$date <- as.Date(gsub(\" CDT\", \"\", newTemp$Date), format=\"%Y-%m-%d\")\nnewTemp$Date <- NULL\nnewTemp$rain <- newTemp$PrecipitationIn\nnewTemp$rain <- as.numeric(newTemp$rain)\nnewTemp$rain[which(is.na(newTemp$rain))] <- 0\nnewTemp$PrecipitationIn <- NULL\nnewTemp$minTemp <- newTemp$Min_TemperatureF\nnewTemp$Min_TemperatureF <- NULL\nnewTemp$maxTemp <- newTemp$Max_TemperatureF\nnewTemp$Max_TemperatureF <- NULL\n\n\n############\n# PREPARE rt FOR MERGING BY REMOVING EXTRA DATES\n############\nrt <- rt[which(rt$date < min(newTemp$date)),]\n\n#########################################\n# MERGE newTemp WITH  rt\n#########################################\nrt <- rbind.fill(rt, newTemp)\n\n#If you run twice on one day, you get non-consequential errors\n\n#########################################\n#ADD CUMULATIVE RAINFALL TO CORRESPONDING COLUMNS\n#########################################\nrowsToAdd <- as.numeric(row.names(rt[which(is.na(rt$rain20.39)),]))\nrowsToAdd <- rowsToAdd[rowsToAdd>30]\n\nfor (j in colnames(rt)[grepl(\"rain\", colnames(rt))][-1]){\n  for (i in rowsToAdd){\n    rt[i,j] <-\n      sum(rt$rain[which(rt$date <= rt$date[i-min(as.numeric(unlist(strsplit(gsub(\"rain\", \"\", j), \".\", fixed=TRUE))))] &\n                           rt$date >= rt$date[i-max(as.numeric(unlist(strsplit(gsub(\"rain\", \"\", j), \".\", fixed=TRUE))))])], na.rm=TRUE)\n  }\n}\n\n#########################################\n#ADD MINIMUM MINTEMP FOR EACH MINTEMP COLUMN COLUMN\n#########################################\nfor (j in colnames(rt)[grepl(\"minTemp\", colnames(rt))][-1]){\n  for (i in rowsToAdd){\n    rt[i,j] <-\n      min(rt$minTemp[which(rt$date <= rt$date[i-min(as.numeric(unlist(strsplit(gsub(\"minTemp\", \"\", j), \".\", fixed=TRUE))))] &\n                              rt$date >= rt$date[i-max(as.numeric(unlist(strsplit(gsub(\"minTemp\", \"\", j), \".\", fixed=TRUE))))])], na.rm=TRUE)\n  }\n}\n\n#########################################\n# WRITE CSV WITH UPDATED RAIN AND TEMP INFO\n#########################################\nwrite.csv(rt, \"E:/fdoh/public/mosquito/rainAndTemp/rainAndTempUpdated.csv\")\n\n##########################################\n# DEFINE MOST RECENT TRAP DATE\n##########################################\nrecent <- max(ts$date[which(is.na(ts$tot)==FALSE)])\n\n#########################################\n# ADD MOSQUITO DATA TO RT\n#########################################\n#master <- merge(ts, rt[which(rt$date != recent),], by=\"date\")\nmaster <- merge(ts, rt, by=\"date\")\n\n#########################################\n# CREATE A MOSQUITOES PER TRAP COLUMN\n#########################################\nmaster$totPer <- master$tot / master$nTraps\n\n#########################################\n# CREATE A DAY OF YEAR COLUMN\n#########################################\nmaster$day <- as.numeric(format(master$date, format=\"%j\"))\n\n#########################################\n# CREATE A MOST RECENT TRAP COLUMN\n#########################################\nmaster$mostRecent <- NA\nfor (i in 2:nrow(master)){\n  master$mostRecent[i] <-\n    ifelse(master$date[i] - master$date[i-1] > 20,\n           NA,\n           master$totPer[i-1])\n}\n\n#########################################\n#### CREATE A VECTOR OF ALL THE POSSIBLE COMBINATIONS OF MIN TEMP RANGES AND RAINFALL RANGES\n#########################################\n\nrainPosibs <- rep(colnames(master)[grepl(\"rain\", colnames(master))][-1],\n                  length(colnames(master)[grepl(\"minTemp\", colnames(master))][-1]))\n# minTempPosibs <- sort(rep(colnames(master)[grepl(\"minTemp\", colnames(master))][-1],\n#                           length(colnames(master)[grepl(\"rain\", colnames(master))][-1])))\n# posibs <- paste0(rainPosibs, \"AND\", minTempPosibs)\n\n\n#########################################\n#CREATE A DATA FRAME FROM MY POSIBS VECTOR\n# THIS IS WHERE I'LL PUT MY MODEL QUALITY INDICATORS\n#########################################\n#########################################\n#pred <- as.data.frame(posibs)\npredRain <- as.data.frame(unique(sort(rainPosibs)))\ncolnames(predRain) <- \"posibs\"\n#predTemp <- as.data.frame(unique(sort(minTempPosibs)))\n#colnames(predTemp) <- \"posibs\"\n\n#########################################\n#Test the r-squared for each column (RAIN ONLY)\n#########################################\npredRain$r.squared <- NA\npredRain$adj.r.squared <- NA\npredRain$sigma <- NA\n\n# #GOOD\n# for (i in predRain$posibs){\n#   mylm <- summary(lm(master[,\"totPer\"] ~\n#                        master[,i] +\n#                        I(master[,i]^2)))\n#   \n#   predRain$r.squared[which(predRain$posibs == i)] <-\n#     mylm$r.squared\n#   \n#   predRain$adj.r.squared[which(predRain$posibs == i)] <-\n#     mylm$adj.r.squared\n#   \n#   predRain$sigma[which(predRain$posibs == i)] <-\n#     mylm$sigma\n# }\n\n\n# EXPERIMENTAL\nfor (i in predRain$posibs){\n  mylm <- summary(lm(master[,\"totPer\"] ~\n                       I(master[,i]^2) +\n                       master$mostRecent + 0))\n  \n  predRain$r.squared[which(predRain$posibs == i)] <-\n    mylm$r.squared\n  \n  predRain$adj.r.squared[which(predRain$posibs == i)] <-\n    mylm$adj.r.squared\n  \n  predRain$sigma[which(predRain$posibs == i)] <-\n    mylm$sigma\n}\n\n\n# \n# #########################################\n# #Test the r-squared for each column (TEMP ONLY)\n# #########################################\n# predTemp$r.squared <- NA\n# predTemp$adj.r.squared <- NA\n# predTemp$sigma <- NA\n# for (i in 1:length(predTemp$posibs)){\n#   mylm <- summary(lm(master[,\"totPer\"] ~\n#                        master[,minTempPosibs[i]]\n#   ))\n#   predTemp$r.squared[i] <- mylm$r.squared\n#   predTemp$adj.r.squared[i] <- mylm$adj.r.squared\n#   predTemp$sigma[i] <- mylm$sigma\n#   \n# }\n# \n# #########################################\n# #Test the r-squared for each column (RAIN AND TEMP)\n# #########################################\n# pred$r.squared <- NA\n# pred$adj.r.squared <- NA\n# pred$sigma <- NA\n# for (i in 1:length(pred$posibs)){\n#   mylm <- summary(lm(master[,\"totPer\"] ~\n#                        master[,unlist(strsplit(posibs, \"AND\")[i])[1]] +\n#                        master[,unlist(strsplit(posibs, \"AND\")[i])[2]]\n#   ))\n#   pred$r.squared[i] <- mylm$r.squared\n#   pred$adj.r.squared[i] <- mylm$adj.r.squared\n#   pred$sigma[i] <- mylm$sigma\n#   \n# }\n\n#########################################\n#Select best predicition model\n#########################################\n#pred2 <- rbind(pred, predTemp, predRain)\n# \n# pred2 <- pred2[rev(order(pred2$adj.r.squared)),] #or should I order by Sigma?\n# \n# head(pred2)\n# \n# pred3 <- pred2[order(pred2$sigma),]\n# pred3 <- pred3[which(is.na(pred3$sigma) == FALSE),]\n# best <- as.character(pred2$posibs[which(pred2$adj.r.squared == \n#                                           max(pred2$adj.r.squared))])  \n# \n# bestModel <- lm(master$totPer ~ master[,best])\n# names(bestModel$coefficients)[2] <-\n#   as.character(best)\n# summary(bestModel) # IT LOOKS LIKE MIN TEMP DOESN'T EVEN MATTER\n\n#BASICALLY, my best bets are 5.25 (r.sq = .39)\n# and 20.40 (r.sq = .38)\n\npredRain <- predRain[rev(order(predRain$adj.r.squared)),]\nhead(predRain)\n\n#good\n# best <- lm(totPer ~ rain17.36 + \n#              I(rain17.36^(2)) + 0, data = master)\n\n#experimental\nbest <- lm(totPer ~ \n             I(rain15.29^2) +\n             mostRecent + \n             0, \n           data=master)\n\nsummary(best)\n\ncoefTemp <- \n  (master$rain15.29^2) +\n  master$mostRecent \n\n# coefTemp <-master$rain17.36 + \n#   (master$rain17.36^2)\n\nplot(coefTemp, master$totPer)\n\n\n\n#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n#write.csv(pred, \"E:/workingdirectory/mosquito/rainAndTemp/pred.csv\")\n\n#########################################\n# USING BEST LOG MODEL, MAKE A PREDICTEDLOG COLUMN IN master\n#########################################\n#predict(bestModel, master[which(master$date )])\n\n#master$predicted<- exp(-1.121293 + (master$rain17.37*.200055) + (master$minTemp14.32*0.074435))\n\n#########################################\n# MAKE A DF OF FUTURE DATES\n#########################################\n\nfutureDates <- as.data.frame(seq(max(master$date)-1, max(rt$date)+17, 1))\ncolnames(futureDates) <- \"date\"\n\n#futureDates <- rbind.fill(rt, futureDates)\n#futureDates <- futureDates[which(futureDates$date >= Sys.Date()-40),]\n\nfutureDates$rain15.29 <- NA\nfor (i in 1:nrow(futureDates)){\n  futureDates$rain15.29[i] <-\n    sum(rt$rain[which(rt$date >= futureDates$date[i] - 40 &\n                            rt$date <= futureDates$date[i] - 20)],\n        na.rm=TRUE)\n}\n\n\n########## ADD MOST RECENT TRAPPING TO futureDates\nfutureDates$mostRecent <- NA\nfor (i in 1:nrow(futureDates)){\n  futureDates$mostRecent[i] <-\n    ifelse(futureDates$date[i] - max(master$date) > 20,\n           NA,\n           master$totPer[which(master$date == max(master$date))])  \n}\n\n\n#########################################\n# ADD A COLUMN OF PREDICTED\n##########################################\nmaster$predicted <- predict.lm(object = best,\n                               newdata = master,\n                               interval=\"none\",\n                               level=0.7)\nmaster$lwr <- predict.lm(object = best,\n                          newdata = master,\n                          interval=\"prediction\",\n                          level=0.7)[, \"lwr\"]\nmaster$upr <- predict.lm(object = best,\n                         newdata = master,\n                         interval=\"prediction\",\n                         level=0.7)[, \"upr\"]\n\n##########################################\n# PREDICT FOR NEXT 20 DAYS\n##########################################\nmyPredictions <- cbind(futureDates, predict(best, \n                           futureDates, \n                           interval=\"prediction\",\n                           level=0.7))\nmyPredictions$predicted <- myPredictions$fit\n\n############################################\n# REMOVE PREDICTION FOR MOST RECENT TRAP DATE\n############################################\nmyPredictions <- myPredictions[which(myPredictions$date >\n                                       max(master$date)),]\n# library(stats)\n# myPredictions <- cbind(futureDates, predict(loess(best, span=1), \n#         futureDates, \n#         interval=\"confidence\",\n#         level=0.95))\n#########################################\n# COMBINE master AND myPredictions\n#########################################\nmaster <- rbind.fill(master, myPredictions)\n\n\n\n#########################################\n# PLOT PREDICTED VS OBSERVED (FUTURE)\n#########################################\nmaster2014 <- master[which(master$date > \"2014-01-01\"),]\nplot(master2014$date, master2014$predicted, type=\"n\", ylim=c(0,400),\n     xlab=\"Date\",\n     ylab=\"Mosquitoes per trap\")\nlines(master2014$date, master2014$totPer, col=adjustcolor(\"black\", alpha.f=0.4),\n      lwd=3)\nlines(master2014$date[which(master2014$date >= max(master$date[which(is.na(master$totPer)==FALSE)]))], \n      master2014$predicted[which(master2014$date >= max(master$date[which(is.na(master$totPer)==FALSE)]))],\n      col=adjustcolor(\"darkred\", alpha.f=0.4), lwd=5)\n#lines(master2014$date,\n#      master2014$predicted)\n\n#########################################\n# PLOT PREDICTED VS OBSERVED (PAST)\n#########################################\nplot(master$date, master$predicted, type=\"n\",\n     ylim=c(0,1500))\nlines(master$date, master$predicted,\n      col=adjustcolor(\"black\", alpha.f=0.4),\n      lwd=3)\nlines(master$date, master$totPer,\n      col=adjustcolor(\"red\", alpha.f=0.4),\n      lwd=3)\n\nplot(master$date, log(master$predicted), type=\"n\")\nlines(master$date, log(master$predicted),\n      col=adjustcolor(\"black\", alpha.f=0.4))\nlines(master$date, log(master$totPer),\n      col=adjustcolor(\"red\", alpha.f=0.4))\n\n\n########################\n# HISTORICAL RAINFALL\n########################\nplot(rt$date, \n     rt$rain, \n     type=\"p\", \n     col=adjustcolor(\"black\", alpha.f=0.2), \n     pch=16,\n     xlab=\"Date\",\n     ylab=\"Daily rainfall (in.)\",\n     cex.axis=0.6)\n\n\n\n############\n# PLOT OVERLAPPED TIME SERIES \n############\nplot(ts$day, ts$tot/ts$nTraps, \n     type=\"n\",\n     xlab=\"Day\",\n     ylab=\"Mosquitoes\")\n\n#ADD LINES\nfor (i in unique(sort(ts$year))){\n  lines(ts$day[which(ts$year == i)],\n        ts$tot[which(ts$year == i)] / \n          ts$nTraps[which(ts$year == i)],\n        col=adjustcolor(ts$col[which(ts$year == i)], alpha.f=0.5),\n        lwd=3)\n  text(x=ts$day[which(ts$year == i &\n                        ts$tot / ts$nTraps == \n                        max(ts$tot[which(ts$year == i)]/ \n                              ts$nTraps[which(ts$year == i)]))],\n       y=max(ts$tot[which(ts$year == i)] / \n               ts$nTraps[which(ts$year == i)]),\n       labels=i,\n       col=adjustcolor(ts$col[which(ts$year == i)], alpha.f=0.7)[1])\n  Sys.sleep(1)\n}\n\n################\n# PLOT MOSQUITOES PER TRAP BY SPECIES\n################\ntsCode <- ts[,which(grepl(\"code|date|day|nTraps\", colnames(ts)) & \n                      grepl(\"site\", colnames(ts)) == FALSE)]\n\npar(mfrow=c(5,4))\npar(mar=c(4,4,1,1))\npar(oma=c(0,0,0,0))\nfor (i in unique(sort(raw.dat$code))[1:20]){\n  plot(tsCode$date,\n       tsCode[,paste0(\"code\", i)]/ tsCode$nTraps,\n       type=\"l\",\n       col=adjustcolor(\"red\",alpha.f=0.4),\n       main=vec$name[which(vec$code == i)],\n       cex.axis=1,\n       cex.main=0.8,\n       xlab=\"Year\",\n       ylab=\"Mosquitoes\")\n  points(tsCode$date,\n         tsCode[,paste0(\"code\",i)]/ tsCode$nTraps,\n         pch=16,\n         col=adjustcolor(\"red\", alpha.f=0.4),\n         cex=0.5)\n}\n\n\n\npar(mfrow=c(5,4))\npar(mar=c(4,4,1,1))\npar(oma=c(0,0,0,0))\nfor (i in unique(sort(raw.dat$code))[21:33]){\n  plot(tsCode$date,\n       tsCode[,paste0(\"code\", i)]/ tsCode$nTraps,\n       type=\"l\",\n       col=adjustcolor(\"red\",alpha.f=0.4),\n       main=vec$name[which(vec$code == i)],\n       cex.axis=1,\n       cex.main=0.8,\n       xlab=\"Year\",\n       ylab=\"Mosquitoes\")\n  points(tsCode$date,\n         tsCode[,paste0(\"code\",i)]/ tsCode$nTraps,\n         pch=16,\n         col=adjustcolor(\"red\", alpha.f=0.4),\n         cex=0.5)\n}\n# \n# plot(x=tsCode$date, \n#      y=log(tsCode$code2/\n#        ts$nTraps), \n#      type=\"n\",\n#      xlab=\"Day\",\n#      ylab=\"Mosquitoes\",\n#      ylim=c(0,7))\n# for (i in colnames(tsCode[which(grepl(\"code\", colnames(tsCode)))])){\n#   lines(tsCode$date,\n#         log(tsCode[,i]/ tsCode$nTraps),\n#         col=adjustcolor(\"black\", alpha.f=0.2))\n#   text(x=tsCode$date[which(tsCode[,i]/tsCode$nTraps == max(tsCode[,i])/tsCode$nTraps)],\n#        y=max(tsCode[,i]/tsCode$nTraps),\n#        labels=id$name[which(id$code == as.numeric(gsub(\"code\", \"\", i)))],\n#        col=adjustcolor(\"black\", alpha.f=0.2),\n#        cex=0.8)\n#   Sys.sleep(1)\n# }\n\n\n##############\n# PLOT FOR EACH TRAP\n##############\ntsSite <- ts[,which(grepl(\"nTraps|day|date|site\", colnames(ts)) &\n                      grepl(\"code\", colnames(ts))==FALSE)]\n\npar(mfrow=c(5,2))\npar(mar=c(4,4,2,1))\npar(oma=c(0,0,0,0))\nfor (i in as.numeric(gsub(\"site\", \"\",colnames(tsSite[which(grepl(\"site\", colnames(tsSite)))])))){\n  plot(ts$date,\n       ts[,paste0(\"site\", i)],\n       xlab=\"Year\",\n       ylab=\"Mosquitoes\",\n       main=loc$name[which(loc$Trap == i)],\n       col=adjustcolor(\"darkred\", alpha.f=0.6),\n       pch=16,\n       cex=0.5)\n  lines(ts$date,\n        ts[,paste0(\"site\", i)],\n        col=adjustcolor(\"darkred\", alpha.f=0.6))\n}\n############\n# MAP THE TRAPS\n############\nlibrary(maps)\nlibrary(rJava)\nlibrary(OpenStreetMap)\nlibrary(rgdal)\nlibrary(maps)\nlibrary(RColorBrewer)\n\n#Assorted colors for trap legend\n#display.brewer.all()\n\ntrapclr <- brewer.pal(10, \"Set3\")\n\npar(mfrow=c(1,1))\n#SIMPLE \n\ntotPerSiteRecent <- as.numeric(unlist(master[which(master$date == \n                                               recent),\n                                       colnames(master[which(grepl(\"site\", colnames(master)) & \n                                                               nchar(colnames(master)) < 7)])]))\n\ntotPerSiteNormal <- apply(master[which(master$date < recent),\n                                             colnames(master[which(grepl(\"site\", colnames(master)) & \n                                                                     nchar(colnames(master)) < 7)])],\n                          2,\n                          sum)\n\n\n\n#WATERCOLOR MAP\nwcMap <- openmap(c(30, -82.65), c(29.4,-82.0),\n                         type=\"stamen-watercolor\")\nwcMap <- openproj(wcMap, projection = \"+proj=longlat\")\nplot(wcMap, raster=TRUE)\n#plot(wcMap)\n\nalachuacol <- NA\ncountycols <- rep(adjustcolor(\"black\", alpha.f=0.2), 67)\ncountycols <- rep(\"white\", 67)\n\nmap(\"county\", \"florida\", \n    fill=TRUE, \n    col=c(alachuacol,countycols),\n    xlim=c(-82.75,-82), \n    ylim=c(29.4,30),\n    border=NA, \n    add=T)\n\n#ADD TRAP POINTS\npoints(loc$long, loc$lat,\n       pch=16,\n       col=adjustcolor(\"darkred\", alpha.f=0.6),\n       cex=totPerSite^(1/3))\n# text(loc$long, loc$lat,\n#      labels=loc$name,\n#      col=\"darkgrey\",\n#      cex=totPerSite^(1/8)/3,\n#      pos=3)\n\n# legend(x=\"topright\",\n#        pch=16,\n#        col=adjustcolor(trapclr, alpha.f=0.8),\n#        legend=loc$name,\n#        cex=0.5,\n#        ncol=2,\n#        bg=adjustcolor(\"black\", alpha.f=0.1),\n#        pt.cex=2)\n\n# \n# sabho <- openmap(c(40, -100), c(20, -80),\n#                type=\"stamen-watercolor\")\n# plot(sabho)\n\n\n##########################\n# WNV MAP\n##########################\npar(mfrow=c(1,1))\ncountycols2 <- rep(adjustcolor(\"white\", alpha.f=0.2), 67)\nalachuacol2 <- adjustcolor(\"black\", alpha.f=0.2)\n\n\nmap(\"county\", \"florida\", \n    fill=TRUE, \n    col=c(alachuacol2,countycols2),\n    xlim=c(-82.75,-82), \n    ylim=c(29.4,30),\n    border=NA, \n    add=F)\n\ntemp <- master[,which(grepl(\"wnv\" ,colnames(master)) & grepl(\"site\", colnames(master)))]\ntemp <- as.data.frame(cbind(date=master$date, temp))\ntemp <- temp[which(temp$date == max(temp$date[which(is.na(temp$wnvsite1) == FALSE)])),]\ntemp <- as.numeric(temp[-1])\n\n\nmap(\"county\", \"florida\", \n    fill=TRUE, \n    col=c(alachuacol2,countycols2),\n    xlim=c(-82.75,-82), \n    ylim=c(29.4,30),\n    border=NA, \n    add=F)\n\n#ADD TRAP POINTS\npoints(loc$long, loc$lat,\n       pch=16,\n       col=adjustcolor(\"darkred\", alpha.f=0.6),\n       cex=temp^(1/3))\n\n\n#\n\nDiseaseMapFun <- function(disease){\n  temp <- master[,which(grepl(disease ,colnames(master)) & \n                          grepl(\"site\", colnames(master)))]\n  temp <- as.data.frame(cbind(date=master$date, temp))\n  temp <- temp[which(temp$date == \n                       max(temp$date[which(is.na(temp[,paste0(disease, \"site1\")]) == FALSE)])),]\n  temp <- as.numeric(temp[-1])\n  \n  \n  map(\"county\", \"florida\", \n      fill=TRUE, \n      col=c(alachuacol2,countycols2),\n      xlim=c(-82.75,-82), \n      ylim=c(29.4,30),\n      border=NA, \n      add=F)\n  title(main=toupper(disease), cex.main=0.8)\n  \n  #ADD TRAP POINTS\n  points(loc$long, loc$lat,\n         pch=16,\n         col=adjustcolor(\"darkred\", alpha.f=0.6),\n         cex=temp^(1/4))\n  \n  legend(x=\"bottomleft\",\n         pch=16,\n         col=adjustcolor(\"grey\", alpha.f=0.6),\n         pt.cex=c(10, 50, 200)^(1/4),\n         legend=c(10,50,200), bty=\"n\")\n}\n\n\n#PLOT DISEASE MAPS\npar(mfrow=c(3,2))\npar(mar=c(0,0,3,0))\npar(oma=c(1,1,1,0))\nDiseaseMapFun(\"wnv\")\nDiseaseMapFun(\"slev\")\nDiseaseMapFun(\"eeev\")\nDiseaseMapFun(\"dengue\")\nDiseaseMapFun(\"malaria\")\nDiseaseMapFun(\"chik\")\n#DiseaseMapFun(\"yellow\")\n\n\n############################\n\n#######\n# HISTOGRAMS OF HISTORICAL, OBSERVED, PREDICTED\n########\nlibrary(arm)\nbootRain <- rnorm(1000, \n                  mean=coef(best)[1], \n                  sd=se.coef(best)[1] * \n                    sqrt(nrow(master[which(is.na(master$totPer) == FALSE),])))\nbootRecent <- rnorm(1000, \n                    mean=coef(best)[2], \n                    sd=se.coef(best)[2] * \n                      sqrt(nrow(master[which(is.na(master$totPer) == FALSE),])))\n#Old way\n#bootPred <- ((master$rain15.29[which(master$date == \"2014-06-16\")]^(2)*bootRain) +\n #              (master$mostRecent[which(master$date == \"2014-06-16\")]*bootRecent))^(1/3)\n\n#Experimental\nbootPred <- ((mean(master$rain15.29[which(master$date > recent)], na.rm=T)^(2)*bootRain) +\n               (mean(master$mostRecent[which(master$date > recent)], na.rm=T)*bootRecent))^(1/3)\n\n\nbreakNum <- 20\nhistCols <- colorRampPalette(adjustcolor(c(\"darkgreen\", \"darkred\"), alpha.f=0.5))(1+ breakNum) \n\nnCols <- 30\ncol1 <- \"darkgreen\"\ncol2 <- \"darkred\"\nalexCols <- colorRampPalette(c(col1, col2))(nCols)\n\n#PLOT\nmyhist <- \n  hist(master$totPer[which(master$date < \"2014-01-01\")]^(1/3), \n     breaks=breakNum,\n     xlab=\"Mosquitoes per trap (2008-13)\",\n     main=NA,\n     col=histCols,\n     border=NA,\n     xaxt=\"n\",\n     freq=FALSE,\n     ylim=c(0,.4))\naxis(side=1,\n     at=c(0, 100, 400, 1000, 1600)^(1/3),\n     labels=c(0, 100, 400, 1000, 1600))\nabline(v=master$totPer[which(master$date == recent)]^(1/3),\n       col=adjustcolor(\"blue\", alpha.f=0.2),\n       lwd=2)\n# text(x= master$totPer[which(master$date == recent)]^(1/3),\n#      y= max(myhist$density),\n#      labels = \"Most recent \\n collection\",\n#      pos=4,\n#      col=adjustcolor(\"blue\", alpha.f=0.7))\n# # HIST OF PREDICTIONS\n# hist(bootPred,\n#   col=adjustcolor(\"black\", alpha.f=0.2), add=TRUE,\n#   breaks=breakNum,\n#   freq=FALSE,\n#   border=NA)\n# #LINE OF PREDICTIONS\nhist(bootPred,\n     xaxt=\"n\",\n     border=NA,\n     freq=FALSE,\n     main=NA,\n     xlab=\"Estimated mosquitoes per trap\")\naxis(side=1,\n     at=c(0, 100, 400, 1000, 1600)^(1/3),\n     labels=c(0, 100, 400, 1000, 1600))\nlines(density(bootPred, adjust=2, na.rm=T), \n      lwd=3,\n      col=adjustcolor(\"darkred\", alpha.f=0.4))\n\n#LEGEND\nlegend(\"topright\",\n       fill=c(\"darkgreen\", NA, NA),\n       col=c(NA, adjustcolor(\"blue\", alpha.f=0.4), \"black\"),\n       lty=c(NA, 1, 6),\n       lwd=c(NA, 2, 1),\n       legend=c(\"Historical observations\",\n                \"Most recent collection\",\n                \"2 week prediction\"),\n       bty=\"n\",\n       border=FALSE)\n\n# # HIST OF PREDICTIONS\n# hist(bootPred,\n#   col=adjustcolor(\"black\", alpha.f=0.2), add=TRUE,\n#   breaks=breakNum,\n#   freq=FALSE,\n#   border=NA)\n# #LINE OF PREDICTIONS\n\n\n###################\n# DISEASE PLOT\n###################\nDiseaseLinesFun <- function(color, disease){\n  temp <- master#[which(is.na(master[,i]) == FALSE),]\n  lines(temp$date, temp[,disease]^(1/3),\n        col=adjustcolor(color, alpha.f=0.3),\n        lwd=3)\n#   points(master$date, master[,disease]^(1/3),\n#          col=adjustcolor(color, alpha.f=0.5),\n#          pch=16)\n}\npar(mar=c(5,4,2,1))\npar(oma=c(1,1,1,1))\nplot(master$date, master$wnv^(1/3), type=\"n\",\n     yaxt=\"n\",\n     xlab=\"Date\",\n     ylab=\"Mosquitoes per trap\", \n     ylim=c(0, max(master$wnv^(1/3), na.rm=TRUE)))\naxis(side=2,\n     at=c(10, 100, 1000, 5000)^(1/3),\n     labels=c(10, 100, 1000, 5000))\nDiseaseLinesFun(\"red\", \"wnv\")\nDiseaseLinesFun(\"darkgreen\", \"dengue\")\nDiseaseLinesFun(\"darkblue\", \"malaria\")\nDiseaseLinesFun(\"purple\", \"slev\")\nDiseaseLinesFun(\"brown\", \"eeev\")\nDiseaseLinesFun(\"darkorange\", \"chik\")\nDiseaseLinesFun(\"grey\", \"yellow\")\n\nlegend(x=\"topleft\",\n       col=adjustcolor(c(\"red\", \"darkgreen\", \"darkblue\", \"purple\", \"brown\", \"darkorange\", \"grey\"), alpha.f=0.3),\n       lwd=3,\n       legend=c(\"WNV\",\n                \"Dengue\", \n                \"Malaria\",\n                \"SLEV\",\n                \"EEEV\",\n                \"Chikungunya\",\n                \"Yellow Fever\"),\n       bty=\"n\")\n############\n# SAVE IMAGE FOR REPORTS\n############\nsave.image(\"E:/fdoh/public/mosquito/reports/2014-08-01/master.RData\")\n\n#SHOW FORECAST\n\ncbind(as.character(master$date[which(is.na(master$predicted) == FALSE)]), \n      master$totPer[which(is.na(master$predicted) == FALSE)],\n      master$predicted[which(is.na(master$predicted) == FALSE)], \n      master$lwr[which(is.na(master$predicted) == FALSE)], \n      master$upr[which(is.na(master$predicted) == FALSE)])\n\n\n# library(car)\n# best.boot <- Boot(best, R=1999)\n# summary(best.boot)\n# confint(best.boot, level=0.8, type=\"norm\")\n# hist(best.boot)\n# boot.ci(best.boot)\n############\n#\n############\n\n##########KNN\n\noldPreds <- master[which(master$date >= \"2013-01-01\" &\n                           is.na(master$totPer) == FALSE),\n                   c(\"totPer\", \"rain5.19\", \"predicted\")]\n\nmyTrain <- master[which(master$date < \"2013-01-01\" &\n                          is.na(master$totPer) == FALSE &\n                          is.na(master$rain5.19) == FALSE),\n                  c(\"totPer\", \"rain5.19\")]\n\nmyTrain$totPerFac <- factor(myTrain$totPer)\nmyTest <- master[which(master$date >= \"2013-01-01\" &\n                         is.na(master$totPer) == FALSE),\n                 c(\"totPer\", \"rain5.19\")]\nmyTest$totPerFac <- factor(myTest$totPer)\n\nlibrary(\"class\")\nz <- \n  knn(train = myTrain,\n      test = myTest,\n      cl = myTrain$totPerFac,\n      k=1,\n      prob=TRUE)\nx <- as.numeric(as.character(z))\n\npar(mfrow=c(1,1))\nplot(myTest$totPer, x)\n\nplot(1:nrow(myTest), myTest$totPer, type=\"l\", col=\"red\") #observed\nlines(1:nrow(myTest), x, col=\"darkgreen\") #predicted by knn\n#lines(1:nrow(myTest), oldPreds$predicted, col=\"blue\") #predicted by current model\n\n#quantify difference\nlm.knn <- lm(myTest$totPer ~ x)\nlm.old <- lm(myTest$totPer ~ oldPreds$predicted)\n\nsum(lm.old$residuals^2) - sum(lm.knn$residuals^2)\n\nbarplot(c(sum(lm.old$residuals^2),sum(lm.knn$residuals^2)),\n        names=c(\"old\", \"knn\"))\n\n\n#what about changing k?\nplot(1:nrow(myTest), myTest$totPer, type=\"l\", col=\"red\") #observed\n\na <- as.data.frame(1:20)\ncolnames(a) <- \"k\"\na$r.squared <- NA\na$sls <- NA\n\nfor (i in a$k){\n    z <- \n    knn(train = myTrain,\n        test = myTest,\n        cl = myTrain$totPerFac,\n        k=i,\n        prob=TRUE)\n  x <- as.numeric(as.character(z))\n  \n  \n  a$r.squared[which(a$k == i)] <-\n    summary(lm(myTest$totPer~ x))$r.squared\n  \n  a$sls[which(a$k == i)] <- \n    sum(lm(myTest$totPer ~ x)$residuals^2)\n\n  #lines(1:nrow(myTest), x, col=\"darkgreen\") #predicted by knn\n  #Sys.sleep(0.5)\n}\n#k=1 produces best result\n\na <- a[order(a$sls),]\na\n\n\n\n\n\n\n\n\n\n\n\nkmeans(myTrain[,1:2])\n\n#Naive Bayes\nlibrary(e1071)\n\nnB_model <- naiveBayes(totPer ~ rain15.29 + mostRecent, data=master)\nsummary(nB_model)\nnB_model$apriori\n",
    "created" : 1408051189115.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2380882497",
    "id" : "FF6FBB62",
    "lastKnownWriteTime" : 1406858234,
    "path" : "E:/fdoh/public/mosquito/historical/master.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}